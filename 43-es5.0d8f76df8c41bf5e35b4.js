function _defineProperty(e,r,t){return(r=_toPropertyKey(r))in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function _slicedToArray(e,r){return _arrayWithHoles(e)||_iterableToArrayLimit(e,r)||_unsupportedIterableToArray(e,r)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(e,r){if(e){if("string"==typeof e)return _arrayLikeToArray(e,r);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?_arrayLikeToArray(e,r):void 0}}function _arrayLikeToArray(e,r){(null==r||r>e.length)&&(r=e.length);for(var t=0,o=new Array(r);t<r;t++)o[t]=e[t];return o}function _iterableToArrayLimit(e,r){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var o,n,a,i,l=[],s=!0,d=!1;try{if(a=(t=t.call(e)).next,0===r){if(Object(t)!==t)return;s=!1}else for(;!(s=(o=a.call(t)).done)&&(l.push(o.value),l.length!==r);s=!0);}catch(e){d=!0,n=e}finally{try{if(!s&&null!=t.return&&(i=t.return(),Object(i)!==i))return}finally{if(d)throw n}}return l}}function _arrayWithHoles(e){if(Array.isArray(e))return e}function _classCallCheck(e,r){if(!(e instanceof r))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,r){for(var t=0;t<r.length;t++){var o=r[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,_toPropertyKey(o.key),o)}}function _createClass(e,r,t){return r&&_defineProperties(e.prototype,r),t&&_defineProperties(e,t),Object.defineProperty(e,"prototype",{writable:!1}),e}function _toPropertyKey(e){var r=_toPrimitive(e,"string");return"symbol"==typeof r?r:String(r)}function _toPrimitive(e,r){if("object"!=typeof e||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var o=t.call(e,r||"default");if("object"!=typeof o)return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(e)}(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{"2BBi":function(e,r,t){"use strict";t.r(r),r.default=".table-bordered {\n  margin: 0;\n  width: 100%;\n}\n\n.table-bordered td {\n  vertical-align: middle;\n}\n\n.card-body .form-group {\n  margin-bottom: 0px;\n}\n\n.card.shadow .card-header {\n  font-size: 1.8rem;\n  text-transform: capitalize;\n}"},"4gsW":function(e,r,t){"use strict";t.r(r),r.default=".card.shadow .card-header {\n  font-size: 1.8rem;\n  text-transform: capitalize;\n}"},"6HXh":function(e,r,t){"use strict";t.r(r),r.default='<div class="row mt-4 mb-4">\r\n    <div class="col-md-12 mt-8" *ngIf="activeBlock">\r\n      <form [formGroup]="activeBlockForm" id="validateForm">\r\n          <div class="card shadow">\r\n            <div class="card-header"><strong>Block Details</strong></div>\r\n            <div class="card-body">\r\n              <div class="row">\r\n                <div class="form-group col-md-4">\r\n                  <label class="control-label">Number of Total RCC Slabs including basement<sup>*</sup></label>\r\n                  <input readonly type="text" class="form-control" formControlName="totalNoOfSlabs"/>\r\n                </div>\r\n  \r\n                <div class="form-group col-md-4">\r\n                  <label class="control-label">Number of Basement<sup>*</sup></label>\r\n                  <div *ngIf="activeBlockForm?.controls?.totalNoOfPlinth?.value != \'NA\'">\r\n                    <input readonly type="number" class="form-control" formControlName="totalNoOfPlinth"/>\r\n                  </div>\r\n                  <div *ngIf="activeBlockForm?.controls?.totalNoOfPlinth?.value == \'NA\'">\r\n                    <input readonly type="text" class="form-control" formControlName="totalNoOfPlinth"/>\r\n                  </div>\r\n                </div>\r\n  \r\n                <div class="form-group col-md-4">\r\n                  <label class="control-label">Number of Floors<sup>*</sup></label>\r\n                  <input type="number" class="form-control" formControlName="noOfFloors"  [(ngModel)]="activeBlock.noOfFloors" />\r\n                  <div *ngIf="noOfFloors?.errors && (noOfFloors?.dirty || noOfFloors?.touched || isSubmitted)" class="error">\r\n                    <div *ngIf="noOfFloors?.hasError(\'required\')">\r\n                      Number of Floors is required\r\n                    </div>\r\n                    <div *ngIf="noOfFloors?.hasError(\'min\')">\r\n                      Number of Floors should be greater than or equal to 1\r\n                    </div>\r\n                    <div *ngIf="noOfFloors?.hasError(\'max\')">\r\n                      Number of Floors should be less than or equal to 99\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div class="row">\r\n                <div class="form-group col-md-4">\r\n                  <label class="control-label">Number of Units<sup>*</sup></label>\r\n                  <input readonly type="number" class="form-control" formControlName="noOfInventory"/>\r\n                </div>\r\n  \r\n                <div class="form-group col-md-4">\r\n                  <label class="control-label">Number of Lifts<sup>*</sup></label>\r\n                  <input type="number" class="form-control" formControlName="noOfLifts"/>\r\n                  <div *ngIf="noOfLifts?.errors && (noOfLifts?.dirty || noOfLifts?.touched || isSubmitted)" class="error">\r\n                    <div *ngIf="noOfLifts?.hasError(\'required\')">\r\n                      Number of Lifts is required\r\n                    </div>\r\n                    <div *ngIf="noOfLifts?.hasError(\'min\')">\r\n                      Number of Lifts should be greater than or equal to 1\r\n                    </div>\r\n                    <div *ngIf="noOfLifts?.hasError(\'max\')">\r\n                      Number of Lifts should be less than or equal to 99\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class="form-group col-md-4">\r\n                  <label class="control-label">Number of Units Booked<sup>*</sup></label>\r\n                  <input type="number" class="form-control" formControlName="noOfUnitsBooked" />\r\n                  <div *ngIf="noOfUnitsBooked?.errors && (noOfUnitsBooked?.dirty || noOfUnitsBooked?.touched || isSubmitted)" class="error">\r\n                    <div *ngIf="noOfUnitsBooked?.hasError(\'required\')">\r\n                      Number of Units Booked is required\r\n                    </div>\r\n                    <div *ngIf="noOfUnitsBooked?.hasError(\'max\')">\r\n                      Total Number of Units Booked should be less than or equal to {{activeBlockForm?.controls?.noOfInventory?.value}}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n          \r\n              <div class="row">\r\n                <div class="form-group col-md-4">\r\n                  <label class="control-label">Number of Garages Booked<sup>*</sup></label>\r\n                  <input type="number" class="form-control" formControlName="noOfGaragesBooked"  [(ngModel)]="activeBlock.noOfGaragesBooked" />\r\n                  <div *ngIf="noOfGaragesBooked?.errors && (noOfGaragesBooked?.dirty || noOfGaragesBooked?.touched || isSubmitted)" class="error">\r\n                    <div *ngIf="noOfGaragesBooked?.hasError(\'required\')">\r\n                      Number of Garages Booked is required\r\n                    </div>\r\n                    <div *ngIf="noOfGaragesBooked?.hasError(\'max\') && garageNo">\r\n                      Number of Garages Booked should not exceed total number of Garages ({{garageNo}})\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class="mt-8"></div>\r\n            <div class="table-responsive">\r\n              <div class="card-header"><strong>Schedule of Major Works : For Block {{activeBlock?.blockName}}</strong></div>\r\n              <table class="table table-bordered" > \r\n                <thead class="bg-light">\r\n                  <tr>\r\n                    <td>Sr.No.</td>\r\n                    <td>Particulars</td>\r\n                    <td>Original Activity Start Date <br>(At the time of registration)<sup>*</sup></td>\r\n                    <td>Present Activity Start Date<sup>*</sup></td>\r\n                    <td>Original Activity End Date <br>(At the time of registration)<sup>*</sup></td>\r\n                    <td>Present Activity End Date<sup>*</sup></td>\r\n                    <td>Remarks</td>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                    <td>1</td>\r\n                    <td>Excavation & Work upto Plinth level <br>(including basement if so)</td>\r\n                    <td>\r\n                      <div class="form-group col-md-12" *ngIf="activeBlockForm?.controls?.excavationStartDate?.value != \'NA\' && !isPlotted">\r\n                        <input type="date" class="form-control" id="lbl1" [min]="projectStartDate" [max]="projectEndDate" formControlName="excavationStartDate">\r\n                        <div *ngIf="activeBlockForm?.get(\'excavationStartDate\').invalid && (activeBlockForm.get(\'excavationStartDate\').touched || isSubmitted)" class="error">\r\n                          <small *ngIf="activeBlockForm.get(\'excavationStartDate\').hasError(\'required\') || activeBlockForm.get(\'excavationStartDate\').hasError(\'invalidDate\')">Date is required.</small>\r\n                          <small *ngIf="activeBlockForm.get(\'excavationStartDate\').hasError(\'outOfRange\')">Date must be between {{projectStartDate}} {{projectEndDate}}</small>\r\n                          \x3c!-- <small *ngIf="activeBlockForm.get(\'excavationStartDate\').hasError(\'invalidDate\')">Invalid Date format</small> --\x3e\r\n                        </div>\r\n                      </div>\r\n                      <div class="form-group col-md-12 center-align" *ngIf="activeBlockForm?.controls?.excavationStartDate?.value == \'NA\' || isPlotted">\r\n                        NA\r\n                      </div>\r\n                    </td>\r\n                    <td>\r\n                      <div class="form-group col-md-12" *ngIf="!isPlotted">\r\n                        <input type="date" class="form-control" id="lbl1" [min]="projectStartDate" [max]="projectEndDate" formControlName="excavationActStartDate">\r\n                        <div *ngIf="activeBlockForm?.get(\'excavationActStartDate\').invalid && (activeBlockForm.get(\'excavationActStartDate\').touched || isSubmitted)" class="error">\r\n                          <small *ngIf="activeBlockForm.get(\'excavationActStartDate\').hasError(\'required\') || activeBlockForm.get(\'excavationActStartDate\').hasError(\'invalidDate\')">Date is required.</small>\r\n                          <small *ngIf="activeBlockForm.get(\'excavationActStartDate\').hasError(\'outOfRange\')">Date must be between {{projectStartDate}} {{projectEndDate}}</small>\r\n                          \x3c!-- <small *ngIf="activeBlockForm.get(\'excavationActStartDate\').hasError(\'invalidDate\')">Invalid Date format</small> --\x3e\r\n                        </div>\r\n                      </div>\r\n                      <div class="form-group col-md-12 center-align" *ngIf="isPlotted">\r\n                          NA\r\n                      </div>\r\n                    </td>\r\n                    <td>\r\n                      <div class="form-group col-md-12" *ngIf="activeBlockForm?.controls?.excavationEndDate?.value != \'NA\' && !isPlotted">\r\n                        <input type="date" class="form-control" id="lbl1" [min]="activeBlockForm?.controls?.excavationStartDate?.value" [max]="projectEndDate" formControlName="excavationEndDate">\r\n                        <div *ngIf="activeBlockForm?.get(\'excavationEndDate\').invalid && (activeBlockForm.get(\'excavationEndDate\').touched || isSubmitted)" class="error">\r\n                          <small *ngIf="activeBlockForm.get(\'excavationEndDate\').hasError(\'required\') || activeBlockForm.get(\'excavationEndDate\').hasError(\'invalidDate\')">Date is required.</small>\r\n                          <small *ngIf="activeBlockForm.get(\'excavationEndDate\').hasError(\'outOfRange\')">Date must be between {{projectStartDate}} {{projectEndDate}}</small>\r\n                          \x3c!-- <small *ngIf="activeBlockForm.get(\'excavationEndDate\').hasError(\'invalidDate\')">Invalid Date format</small> --\x3e\r\n                        </div>\r\n                      </div>\r\n                      <div class="form-group col-md-12 center-align" *ngIf="activeBlockForm?.controls?.excavationEndDate?.value == \'NA\' || isPlotted">\r\n                        NA\r\n                      </div>\r\n                    </td>\r\n                    <td>\r\n                      <div class="form-group col-md-12" *ngIf="!isPlotted">\r\n                        <input type="date" class="form-control" id="lbl1" [min]="activeBlockForm?.controls?.excavationActStartDate?.value" [max]="projectEndDate"\r\n                          formControlName="excavationActEndDate">\r\n                          <div *ngIf="activeBlockForm?.get(\'excavationActEndDate\').invalid && (activeBlockForm.get(\'excavationActEndDate\').touched || isSubmitted)" class="error">\r\n                            <small *ngIf="activeBlockForm.get(\'excavationActEndDate\').hasError(\'required\') || activeBlockForm.get(\'excavationActEndDate\').hasError(\'invalidDate\')">Date is required.</small>\r\n                            <small *ngIf="activeBlockForm.get(\'excavationActEndDate\').hasError(\'outOfRange\')">Date must be between {{projectStartDate}} {{projectEndDate}}</small>\r\n                            \x3c!-- <small *ngIf="activeBlockForm.get(\'excavationActEndDate\').hasError(\'invalidDate\')">Invalid Date format</small> --\x3e\r\n                          </div>\r\n                      </div>\r\n                      <div class="form-group col-md-12 center-align" *ngIf="isPlotted">\r\n                        NA\r\n                      </div>\r\n                    </td>\r\n                    <td>\r\n                      <div class="form-group col-md-12">\r\n                        <input type="text" class="form-control" formControlName="excavationWorkRemarks"  [(ngModel)]="activeBlock.excavationWorkRemarks" />\r\n                      </div>\r\n                    </td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>2</td>\r\n                    <td>RCC work above Plinth level upto Terrace level</td>\r\n                    <td>\r\n                      <div class="form-group col-md-12" *ngIf="activeBlockForm?.controls?.plinthStartDate?.value != \'NA\' && !isPlotted">\r\n                          <input type="date" class="form-control" id="lbl1" [min]="projectStartDate" [max]="projectEndDate" formControlName="plinthStartDate">\r\n                          <div *ngIf="activeBlockForm?.get(\'plinthStartDate\').invalid && (activeBlockForm.get(\'plinthStartDate\').touched || isSubmitted)" class="error">\r\n                            <small *ngIf="activeBlockForm.get(\'plinthStartDate\').hasError(\'required\') || activeBlockForm.get(\'plinthStartDate\').hasError(\'invalidDate\')">Date is required.</small>\r\n                            <small *ngIf="activeBlockForm.get(\'plinthStartDate\').hasError(\'outOfRange\')">Date must be between {{projectStartDate}} {{projectEndDate}}</small>\r\n                            \x3c!-- <small *ngIf="activeBlockForm.get(\'plinthStartDate\').hasError(\'invalidDate\')">Invalid Date format</small> --\x3e\r\n                          </div>\r\n                      </div>\r\n                      <div class="form-group col-md-12 center-align" *ngIf="activeBlockForm?.controls?.plinthStartDate?.value == \'NA\' || isPlotted">\r\n                        NA\r\n                      </div>\r\n                    </td>\r\n                    <td>\r\n                      <div class="form-group col-md-12" *ngIf="!isPlotted">\r\n                        <input type="date" class="form-control" id="lbl1" [min]="projectStartDate" [max]="projectEndDate"\r\n                          formControlName="plinthActStartDate">\r\n                          <div *ngIf="activeBlockForm?.get(\'plinthActStartDate\').invalid && (activeBlockForm.get(\'plinthActStartDate\').touched || isSubmitted)" class="error">\r\n                            <small *ngIf="activeBlockForm.get(\'plinthActStartDate\').hasError(\'required\') || activeBlockForm.get(\'plinthActStartDate\').hasError(\'invalidDate\')">Date is required.</small>\r\n                            <small *ngIf="activeBlockForm.get(\'plinthActStartDate\').hasError(\'outOfRange\')">Date must be between {{projectStartDate}} {{projectEndDate}}</small>\r\n                            \x3c!-- <small *ngIf="activeBlockForm.get(\'plinthActStartDate\').hasError(\'invalidDate\')">Invalid Date format</small> --\x3e\r\n                          </div>\r\n                      </div>\r\n                      <div class="form-group col-md-12 center-align" *ngIf="isPlotted">\r\n                        NA\r\n                      </div>\r\n                    </td>\r\n                    <td>\r\n                      <div class="form-group col-md-12" *ngIf="activeBlockForm?.controls?.plinthEndDate?.value != \'NA\' && !isPlotted">\r\n                          <input type="date" class="form-control" id="lbl1" [min]="activeBlockForm?.controls?.plinthStartDate?.value" [max]="projectEndDate" formControlName="plinthEndDate">\r\n                          <div *ngIf="activeBlockForm?.get(\'plinthEndDate\').invalid && (activeBlockForm.get(\'plinthEndDate\').touched || isSubmitted)" class="error">\r\n                            <small *ngIf="activeBlockForm.get(\'plinthEndDate\').hasError(\'required\') || activeBlockForm.get(\'plinthEndDate\').hasError(\'invalidDate\')">Date is required.</small>\r\n                            <small *ngIf="activeBlockForm.get(\'plinthEndDate\').hasError(\'outOfRange\')">Date must be between {{projectStartDate}} {{projectEndDate}}</small>\r\n                            \x3c!-- <small *ngIf="activeBlockForm.get(\'plinthEndDate\').hasError(\'invalidDate\')">Invalid Date format</small> --\x3e\r\n                          </div>\r\n                      </div>\r\n                      <div class="form-group col-md-12 center-align" *ngIf="activeBlockForm?.controls?.plinthEndDate?.value == \'NA\' || isPlotted">\r\n                        NA\r\n                      </div>\r\n                    </td>\r\n                    <td>\r\n                      <div class="form-group col-md-12" *ngIf="!isPlotted">\r\n                        <input type="date" class="form-control" id="lbl1" [min]="activeBlockForm?.controls?.plinthActStartDate?.value" [max]="projectEndDate"\r\n                          formControlName="plinthActEndDate">\r\n                          <div *ngIf="activeBlockForm?.get(\'plinthActEndDate\').invalid && (activeBlockForm.get(\'plinthActEndDate\').touched || isSubmitted)" class="error">\r\n                            <small *ngIf="activeBlockForm.get(\'plinthActEndDate\').hasError(\'required\') || activeBlockForm.get(\'plinthActEndDate\').hasError(\'invalidDate\')">Date is required.</small>\r\n                            <small *ngIf="activeBlockForm.get(\'plinthActEndDate\').hasError(\'outOfRange\')">Date must be between {{projectStartDate}} {{projectEndDate}}</small>\r\n                            \x3c!-- <small *ngIf="activeBlockForm.get(\'plinthActEndDate\').hasError(\'invalidDate\')">Invalid Date format</small> --\x3e\r\n                          </div>\r\n                      </div>\r\n                      <div class="form-group col-md-12 center-align" *ngIf="isPlotted">\r\n                        NA\r\n                      </div>\r\n                    </td>\r\n                    <td>\r\n                      <div class="form-group col-md-12">\r\n                        <input type="text" class="form-control" formControlName="plinthWorkRemarks"  [(ngModel)]="activeBlock.plinthWorkRemarks" />\r\n                      </div>\r\n                    </td>\r\n                    \r\n                  </tr>\r\n                  <tr>\r\n                    <td>3</td>\r\n                    <td>All Internal works, Brick masonry, Plaster, Flooring, <br>including all finishing activities</td>\r\n                    <td>\r\n                      <div class="form-group col-md-12" *ngIf="activeBlockForm?.controls?.internalStartDate?.value != \'NA\' && !isPlotted">\r\n                        <input type="date" class="form-control" id="lbl1" [min]="projectStartDate" [max]="projectEndDate" formControlName="internalStartDate">\r\n                        <div *ngIf="activeBlockForm?.get(\'internalStartDate\').invalid && (activeBlockForm.get(\'internalStartDate\').touched || isSubmitted)" class="error">\r\n                          <small *ngIf="activeBlockForm.get(\'internalStartDate\').hasError(\'required\') || activeBlockForm.get(\'internalStartDate\').hasError(\'invalidDate\')">Date is required.</small>\r\n                          <small *ngIf="activeBlockForm.get(\'internalStartDate\').hasError(\'outOfRange\')">Date must be between {{projectStartDate}} {{projectEndDate}}</small>\r\n                          \x3c!-- <small *ngIf="activeBlockForm.get(\'internalStartDate\').hasError(\'invalidDate\')">Invalid Date format</small> --\x3e\r\n                        </div>\r\n                      </div>\r\n                      <div class="form-group col-md-12 center-align" *ngIf="activeBlockForm?.controls?.internalStartDate?.value == \'NA\' || isPlotted">\r\n                        NA\r\n                      </div>\r\n                    </td>\r\n                    <td>\r\n                      <div class="form-group col-md-12" *ngIf="!isPlotted">\r\n                        <input type="date" class="form-control" id="lbl1" [min]="projectStartDate" [max]="projectEndDate"\r\n                        formControlName="internalActStartDate">\r\n                        <div *ngIf="activeBlockForm?.get(\'internalActStartDate\').invalid && (activeBlockForm.get(\'internalActStartDate\').touched || isSubmitted)" class="error">\r\n                          <small *ngIf="activeBlockForm.get(\'internalActStartDate\').hasError(\'required\') || activeBlockForm.get(\'internalActStartDate\').hasError(\'invalidDate\')">Date is required.</small>\r\n                          <small *ngIf="activeBlockForm.get(\'internalActStartDate\').hasError(\'outOfRange\')">Date must be between {{projectStartDate}} {{projectEndDate}}</small>\r\n                          \x3c!-- <small *ngIf="activeBlockForm.get(\'internalActStartDate\').hasError(\'invalidDate\')">Invalid Date format</small> --\x3e\r\n                        </div>\r\n                      </div>\r\n                      <div class="form-group col-md-12 center-align" *ngIf="isPlotted">\r\n                        NA\r\n                      </div>\r\n                    </td>\r\n                    <td>\r\n                      <div class="form-group col-md-12" *ngIf="activeBlockForm?.controls?.internalEndDate?.value != \'NA\' && !isPlotted">\r\n                        <input type="date" class="form-control" id="lbl1" [min]="activeBlockForm?.controls?.internalStartDate.value" [max]="projectEndDate" formControlName="internalEndDate">\r\n                        <div *ngIf="activeBlockForm?.get(\'internalEndDate\').invalid && (activeBlockForm.get(\'internalEndDate\').touched || isSubmitted)" class="error">\r\n                          <small *ngIf="activeBlockForm.get(\'internalEndDate\').hasError(\'required\') || activeBlockForm.get(\'internalEndDate\').hasError(\'invalidDate\')">Date is required.</small>\r\n                          <small *ngIf="activeBlockForm.get(\'internalEndDate\').hasError(\'outOfRange\')">Date must be between {{projectStartDate}} {{projectEndDate}}</small>\r\n                          \x3c!-- <small *ngIf="activeBlockForm.get(\'internalEndDate\').hasError(\'invalidDate\')">Invalid Date format</small> --\x3e\r\n                        </div>\r\n                      </div>\r\n                      <div class="form-group col-md-12 center-align" *ngIf="activeBlockForm?.controls?.internalEndDate.value == \'NA\' || isPlotted">\r\n                        NA\r\n                      </div>\r\n                    </td>\r\n                    <td>\r\n                      <div class="form-group col-md-12" *ngIf="!isPlotted">\r\n                        <input type="date" class="form-control" id="lbl1" [min]="activeBlockForm?.controls?.internalActStartDate?.value" [max]="projectEndDate"\r\n                          formControlName="internalActEndDate">\r\n                          <div *ngIf="activeBlockForm?.get(\'internalActEndDate\').invalid && (activeBlockForm.get(\'internalActEndDate\').touched || isSubmitted)" class="error">\r\n                            <small *ngIf="activeBlockForm.get(\'internalActEndDate\').hasError(\'required\') || activeBlockForm.get(\'internalActEndDate\').hasError(\'invalidDate\')">Date is required.</small>\r\n                            <small *ngIf="activeBlockForm.get(\'internalActEndDate\').hasError(\'outOfRange\')">Date must be between {{projectStartDate}} {{projectEndDate}}</small>\r\n                            \x3c!-- <small *ngIf="activeBlockForm.get(\'internalActEndDate\').hasError(\'invalidDate\')">Invalid Date format</small> --\x3e\r\n                          </div>\r\n                      </div>\r\n                      <div class="form-group col-md-12 center-align" *ngIf="isPlotted">\r\n                        NA\r\n                      </div>\r\n                    </td>\r\n                    <td>\r\n                      <div class="form-group col-md-12">\r\n                        <input type="text" class="form-control" formControlName="internalWorkRemarks"  [(ngModel)]="activeBlock.internalWorkRemarks" />\r\n                      </div>\r\n                    </td>\r\n                    \r\n                  </tr>\r\n                  <tr>\r\n                    <td>4</td>\r\n                    <td>All External works, Plumbing, Plaster, Terrace, <br> flooring, Lift, Firefighting system etc</td>\r\n                    <td>\r\n                      <div class="form-group col-md-12" *ngIf="activeBlockForm?.controls?.externalStartDate?.value != \'NA\' && !isPlotted">\r\n                        <input type="date" class="form-control" id="lbl1" [min]="projectStartDate" [max]="projectEndDate" formControlName="externalStartDate">\r\n                        <div *ngIf="activeBlockForm?.get(\'externalStartDate\').invalid && (activeBlockForm.get(\'externalStartDate\').touched || isSubmitted)" class="error">\r\n                          <small *ngIf="activeBlockForm.get(\'externalStartDate\').hasError(\'required\') || activeBlockForm.get(\'externalStartDate\').hasError(\'invalidDate\')">Date is required.</small>\r\n                          <small *ngIf="activeBlockForm.get(\'externalStartDate\').hasError(\'outOfRange\')">Date must be between {{projectStartDate}} {{projectEndDate}}</small>\r\n                          \x3c!-- <small *ngIf="activeBlockForm.get(\'externalStartDate\').hasError(\'invalidDate\')">Invalid Date format</small> --\x3e\r\n                        </div>\r\n                      </div>\r\n                      <div class="form-group col-md-12 center-align" *ngIf="activeBlockForm?.controls?.externalStartDate?.value == \'NA\' || isPlotted">\r\n                        NA\r\n                      </div>\r\n                    </td>\r\n                    <td>\r\n                      <div class="form-group col-md-12" *ngIf="!isPlotted">\r\n                        <input type="date" class="form-control" id="lbl1" [min]="projectStartDate" [max]="projectEndDate"\r\n                          formControlName="externalActStartDate">\r\n                          <div *ngIf="activeBlockForm?.get(\'externalActStartDate\').invalid && (activeBlockForm.get(\'externalActStartDate\').touched || isSubmitted)" class="error">\r\n                            <small *ngIf="activeBlockForm.get(\'externalActStartDate\').hasError(\'required\') || activeBlockForm.get(\'externalActStartDate\').hasError(\'invalidDate\')">Date is required.</small>\r\n                            <small *ngIf="activeBlockForm.get(\'externalActStartDate\').hasError(\'outOfRange\')">Date must be between {{projectStartDate}} {{projectEndDate}}</small>\r\n                            \x3c!-- <small *ngIf="activeBlockForm.get(\'externalActStartDate\').hasError(\'invalidDate\')">Invalid Date format</small> --\x3e\r\n                          </div>\r\n                      </div>\r\n                      <div class="form-group col-md-12 center-align" *ngIf="isPlotted">\r\n                        NA\r\n                      </div>\r\n                    </td>\r\n                    <td>\r\n                      <div class="form-group col-md-12" *ngIf="activeBlockForm?.controls?.externalEndDate?.value != \'NA\' && !isPlotted">\r\n                        <input type="date" class="form-control" id="lbl1" [min]="activeBlockForm?.controls?.externalStartDate?.value" [max]="projectEndDate" formControlName="externalEndDate">\r\n                        <div *ngIf="activeBlockForm?.get(\'externalEndDate\').invalid && (activeBlockForm.get(\'externalEndDate\').touched || isSubmitted)" class="error">\r\n                          <small *ngIf="activeBlockForm.get(\'externalEndDate\').hasError(\'required\') || activeBlockForm.get(\'externalEndDate\').hasError(\'invalidDate\')">Date is required.</small>\r\n                          <small *ngIf="activeBlockForm.get(\'externalEndDate\').hasError(\'outOfRange\')">Date must be between {{projectStartDate}} {{projectEndDate}}</small>\r\n                          \x3c!-- <small *ngIf="activeBlockForm.get(\'externalEndDate\').hasError(\'invalidDate\')">Invalid Date format</small> --\x3e\r\n                        </div>\r\n                      </div>\r\n                      <div class="form-group col-md-12 center-align" *ngIf="activeBlockForm?.controls?.externalEndDate?.value == \'NA\' || isPlotted">\r\n                        NA\r\n                      </div>\r\n                    </td>\r\n                    <td>\r\n                      <div class="form-group col-md-12" *ngIf="!isPlotted">\r\n                        <input type="date" class="form-control" id="lbl1" [min]="activeBlockForm?.controls?.externalActStartDate?.value" [max]="projectEndDate"\r\n                         formControlName="externalActEndDate">\r\n                         <div *ngIf="activeBlockForm?.get(\'externalActEndDate\').invalid && (activeBlockForm.get(\'externalActEndDate\').touched || isSubmitted)" class="error">\r\n                          <small *ngIf="activeBlockForm.get(\'externalActEndDate\').hasError(\'required\') || activeBlockForm.get(\'externalActEndDate\').hasError(\'invalidDate\')">Date is required.</small>\r\n                          <small *ngIf="activeBlockForm.get(\'externalActEndDate\').hasError(\'outOfRange\')">Date must be between {{projectStartDate}} {{projectEndDate}}</small>\r\n                          \x3c!-- <small *ngIf="activeBlockForm.get(\'externalActEndDate\').hasError(\'invalidDate\')">Invalid Date format</small> --\x3e\r\n                        </div>\r\n                      </div>\r\n                      <div class="form-group col-md-12 center-align" *ngIf="isPlotted">\r\n                        NA\r\n                      </div>\r\n                    </td>\r\n                    <td>\r\n                      <div class="form-group col-md-12">\r\n                        <input type="text" class="form-control" formControlName="externalWorkRemarks"  [(ngModel)]="activeBlock.externalWorkRemarks" />\r\n                      </div>\r\n                    </td>\r\n                    \r\n                  </tr>\r\n                  <tr>\r\n                    <td>5</td>\r\n                    <td>All activities in common areas</td>\r\n                    <td>\r\n                      <div class="form-group col-md-12">\r\n                        <input type="date" class="form-control" id="lbl1" [min]="projectStartDate" [max]="projectEndDate"\r\n                          formControlName="commonStartDate">\r\n                          <div *ngIf="activeBlockForm?.get(\'commonStartDate\').invalid && (activeBlockForm.get(\'commonStartDate\').touched || isSubmitted)" class="error">\r\n                            <small *ngIf="activeBlockForm.get(\'commonStartDate\').hasError(\'required\') || activeBlockForm.get(\'commonStartDate\').hasError(\'invalidDate\')">Date is required.</small>\r\n                            <small *ngIf="activeBlockForm.get(\'commonStartDate\').hasError(\'outOfRange\')">Date must be between {{projectStartDate}} {{projectEndDate}}</small>\r\n                            \x3c!-- <small *ngIf="activeBlockForm.get(\'commonStartDate\').hasError(\'invalidDate\')">Invalid Date format</small> --\x3e\r\n                          </div>\r\n                      </div>\r\n                    </td>\r\n                    <td>\r\n                      <div class="form-group col-md-12">\r\n                        <input type="date" class="form-control" id="lbl1" [min]="projectStartDate" [max]="projectEndDate"\r\n                          formControlName="commonActStartDate">\r\n                          <div *ngIf="activeBlockForm?.get(\'commonActStartDate\').invalid && (activeBlockForm.get(\'commonActStartDate\').touched || isSubmitted)" class="error">\r\n                            <small *ngIf="activeBlockForm.get(\'commonActStartDate\').hasError(\'required\') || activeBlockForm.get(\'commonActStartDate\').hasError(\'invalidDate\')">Date is required.</small>\r\n                            <small *ngIf="activeBlockForm.get(\'commonActStartDate\').hasError(\'outOfRange\')">Date must be between {{projectStartDate}} {{projectEndDate}}</small>\r\n                            \x3c!-- <small *ngIf="activeBlockForm.get(\'commonActStartDate\').hasError(\'invalidDate\')">Invalid Date format</small> --\x3e\r\n                          </div>\r\n                      </div>\r\n                    </td>\r\n                    <td>\r\n                      <div class="form-group col-md-12">\r\n                        <input type="date" class="form-control" id="lbl1" [min]="activeBlockForm?.controls?.commonStartDate?.value" [max]="projectEndDate"\r\n                          formControlName="commonEndDate">\r\n                          <div *ngIf="activeBlockForm?.get(\'commonEndDate\').invalid && (activeBlockForm.get(\'commonEndDate\').touched || isSubmitted)" class="error">\r\n                            <small *ngIf="activeBlockForm.get(\'commonEndDate\').hasError(\'required\') || activeBlockForm.get(\'commonEndDate\').hasError(\'invalidDate\')">Date is required.</small>\r\n                            <small *ngIf="activeBlockForm.get(\'commonEndDate\').hasError(\'outOfRange\')">Date must be between {{projectStartDate}} {{projectEndDate}}</small>\r\n                            \x3c!-- <small *ngIf="activeBlockForm.get(\'commonEndDate\').hasError(\'invalidDate\')">Invalid Date format</small> --\x3e\r\n                          </div>\r\n                      </div>\r\n                    </td>\r\n                    <td>\r\n                      <div class="form-group col-md-12">\r\n                        <input type="date" class="form-control" id="lbl1" [min]="activeBlockForm?.controls?.commonActStartDate?.value" [max]="projectEndDate"\r\n                          formControlName="commonActEndDate">\r\n                          <div *ngIf="activeBlockForm?.get(\'commonActEndDate\').invalid && (activeBlockForm.get(\'commonActEndDate\').touched || isSubmitted)" class="error">\r\n                            <small *ngIf="activeBlockForm.get(\'commonActEndDate\').hasError(\'required\') || activeBlockForm.get(\'commonActEndDate\').hasError(\'invalidDate\')">Date is required.</small>\r\n                            <small *ngIf="activeBlockForm.get(\'commonActEndDate\').hasError(\'outOfRange\')">Date must be between {{projectStartDate}} {{projectEndDate}}</small>\r\n                            \x3c!-- <small *ngIf="activeBlockForm.get(\'commonActEndDate\').hasError(\'invalidDate\')">Invalid Date format</small> --\x3e\r\n                          </div>\r\n                      </div>\r\n                    </td>\r\n                    <td>\r\n                      <div class="form-group col-md-12">\r\n                        <input type="text" class="form-control" formControlName="commonWorkRemarks"  [(ngModel)]="activeBlock.commonWorkRemarks" />\r\n                      </div>\r\n                    </td>\r\n                   \r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n\r\n            <div class="row" style="width:100%">\r\n              <div class="col-md-12 text-center">\r\n                <br>\r\n                <a href="javascript:void(0);" title="Back">\r\n                  <button class="btn btn-primary" (click)="back()" *ngIf="showBackButton()">Previous</button>&nbsp; \r\n                  <button class="btn btn-primary" (click)="next()" [disabled]="disableButton">Save & Next</button>&nbsp; \r\n                </a>\r\n              </div>\r\n              <br>\r\n            </div>          \r\n            <br>\r\n          </div>\r\n        </div>\r\n        </form>\r\n    </div>\r\n  </div>\r\n  <app-validation-message [message]="inputJson"></app-validation-message>\r\n  <app-loader *ngIf="loadingSpinner"></app-loader>'},"7+B3":function(e,r,t){"use strict";t.r(r),r.default=".form-group {\n  margin-bottom: 0;\n  padding-left: 8px;\n}\n\n.card.shadow .card-header {\n  font-size: 1.8rem;\n  text-transform: capitalize;\n}"},DPTa:function(e,r,t){"use strict";t.r(r),r.default='\r\n<div class="row mt-4 mb-4" *ngIf="step == 1">\r\n    <div class="col-md-12 mt-8" #myDiv>\r\n            <div class="card shadow">\r\n              <div class="card-header"><strong>Form 3 Annexure - Upload excel</strong></div>\r\n                <div class="card-body">\r\n                    <form [formGroup]="uploadFormThreeA" id="form" enctype="multipart/form-data">\r\n                        <div class="col-md-4 col-md-push-4">\r\n                            <div class="alert alert-danger" *ngIf="errorMsg">\r\n                                <strong>Error! </strong> {{excelErrorMsg}}\r\n                                </div>\r\n                                <div class="alert alert-success" *ngIf="successMsg">\r\n                                <strong>{{successMsgTxt}}</strong>\r\n                                </div>\r\n                                <div class="form-group ">\r\n                                    <label class="control-label">Upload Form 3 File<sup>*</sup><span class="tooltip-open"(click)="openToolTip($event,\'FRM_THREE_A_B_EXCEL\')">?</span></label>\r\n                                    <div class="">\r\n                                    <input type="file" class="form-control" (change)="onSelectFile($event)" formControlName="excelfile">\r\n                                    </div>\r\n                                    </div>\r\n                            <div class="col-md-10 text-left"> <img src="assets/images/pdf.png" class="pdf_img" alt="#"/> <a href="{{formThreeExlTemplate}}" target="_blank" class="pdf_text">Download Form 3 Template</a></div>\r\n                        \r\n                            <div class="col-md-12 mt-4"> <button type="button" class="btn btn-primary" (click)="formThreeAExlUpload()" ><i class="fa fa-spinner fa-spin text-white" *ngIf="loader" aria-hidden="true"></i>Upload  Form 3  File</button> </div>\r\n                        \r\n                            </div>\r\n                    </form>\r\n\r\n                    <div class="col-md-12 title Title_y mt-4 mb-4 ">Inventory Summary</div>\r\n    <div class="table-responsive">\r\n        <table class="table table-bordered form3TableAll">\r\n            <thead>\r\n              <tr>\r\n                <th>Type of Inventory</th>\r\n                <th>Number</th>\r\n                <th>Booked</th>\r\n                <th>Unbooked</th>\r\n                <th>Total Carpet area Booked</th>\r\n                <th>Total Carpet area Unbooked</th>\r\n              </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr class="text-center" *ngFor="let summary of formThreeASummayList">\r\n                  <td>{{summary.typeOfInventory}}</td>\r\n                  <td>{{summary.count}}</td>\r\n                  <td>{{summary.bookedUnits}}</td>\r\n                  <td>{{summary.unBookedUnits}}</td>\r\n                  <td>{{summary.totalCarpetAreaBooked.toFixed(2)}}</td>\r\n                  <td>{{summary.totalCarpetAreaUnBooked.toFixed(2)}}</td>\r\n                </tr>\r\n              </tbody>\r\n              </table>\r\n            </div>\r\n\r\n            <div class="row" style="width:100%">\r\n              <div class="col-md-12 text-center">\r\n                <br>\r\n                <a href="javascript:void(0);" title="Back">\r\n                  <button class="btn btn-primary" (click)="back()" [disabled]="disableButton">Previous</button>&nbsp; \r\n                  <button class="btn btn-primary" (click)="next()" [disabled]="disableButton || !fileUploaded || !formThreeAList">Save & Next</button>&nbsp; \r\n                </a>\r\n              </div>\r\n              <br>\r\n            </div>       \r\n        <div class=" col-md-12 title Title_y mt-4 mb-4 " >Inventory Details Progressive</div>\r\n        <div class="col-md-12">\r\n            <div class="table-responsive">\r\n        <table class="table table-responsive-xl table-bordered table-striped table-hover">\r\n        <thead>\r\n        <tr class="text-center bg-dark text-white text-size-small table-th-nowrap">\r\n        <th>Sr.No.</th>\r\n        <th>BLOCK NAME</th>\r\n        <th>UNIT NUMBER OF FLAT/ BUNGALOW/ OFFICE.</th>\r\n        <th>BOOKED / UNBOOKED</th>\r\n        <th>USAGE</th>\r\n        <th>CARPET AREA (in Sq. Mts.)</th>\r\n        <th>AREA OF EXCLUSIVE BALCONY/VERANDA & AREA OF <br>EXCLUSIVE OPEN TERRACE (in Sq. Mts.)</th>\r\n        \x3c!-- <th>STATUS</th>\r\n        <th>UNIT AMOUNT</th>\r\n        <th>RECEIVED AMOUNT</th>\r\n        <th>BALANCE AMOUNT</th>\r\n        <th>DATE OF AGREEMENT</th>\r\n        <th>ENCUMBRANCE STATUS</th>\r\n        <th>ALLOTEE NAME</th>\r\n        <th>TYPE OF KYC</th>\r\n        <th>KYC ID</th>\r\n        <th>Mobile No</th>\r\n        <th>REDEVELOPMENT</th> --\x3e\r\n        </thead>\r\n        <tbody>\r\n        <tr class="text-center" *ngFor="let a of formThreeAList, let i= index">\r\n        <td class="tabel-text-right">{{i+1}}</td>\r\n        <td>{{a.blockName}}</td>\r\n        <td>{{a.flatNo}}</td>\r\n        <td>{{a.status}}</td>\r\n        <td>{{a.usage}}</td>\r\n        <td class="tabel-text-right" >{{transformAmount(a.carpetArea.toFixed(2))}}</td>\r\n        <td class="tabel-text-right">{{transformAmount(a.areaofExBalcony)}}</td>\r\n        \x3c!-- <td>{{a.status}}</td>\r\n        <td class="tabel-text-right">{{transformAmount(a.unitConsideration)}}</td>\r\n        <td class="tabel-text-right">{{transformAmount(a.receivedAmount)}}</td>\r\n        <td class="tabel-text-right">{{transformAmount(a.balanceAmount)}}</td>\r\n        <td  class="text-nowrap">{{a.dateOfAgrrement | date : "dd-MM-yyyy"}}</td>\r\n        <td>{{a.encumbranceStatus}}</td>\r\n        <td>{{a.alloteeName}}</td>\r\n        <td>{{a.typeofKYC}}</td>\r\n        <td>{{a.kycid}}</td>\r\n        <td>{{a.mobileNumber}}</td>\r\n        <td>{{a.redeveloped}}</td> --\x3e\r\n        </tr>\r\n        </tbody>\r\n        </table>\r\n        </div>\r\n        </div>\r\n    </div>\r\n  </div>\r\n  </div>\r\n</div>\r\n\r\n<div class="row mt-4 mb-4" *ngIf="step == 2">\r\n    <div class="col-md-12 mt-8">\r\n      <form [formGroup]="formThreeForm" id="validateForm">\r\n          <div class="card shadow">\r\n            <div class="card-header"><strong>Application of Fund</strong></div>\r\n            <div class="card-body">\r\n              <div class="table-responsive">\r\n                <table class="table table-bordered" > \r\n                  <thead class="bg-light">\r\n                    <tr>\r\n                      <td>Sr.No.</td>\r\n                      <td>Perticulars</td>\r\n                      <td>Estimated Cost at the time of <br> Registration / Alteration (a)<sup>*</sup></td>\r\n                      <td>Incurred & Paid till last <br> QPR (Cumulative)(b)<sup>*</sup></td>\r\n                      <td>Incurred & Paid till this <br> QPR (Cumulative)(c)<sup>*</sup></td>\r\n                      <td>Expenditure Incurred & Paid in <br> this QPR (d)<sup>*</sup>(C-B)</td>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                      <tr>\r\n                        <td>1</td>\r\n                        <td>Land Cost (Sr no 1(i) to iv) of Form-3 </td>\r\n                        <td>\r\n                            <div class="form-group col-md-12">\r\n                              <input type="number" readonly class="form-control" formControlName="subTotalofLandCostA"  [(ngModel)]="formThreeBDetails.subTotalofLandCostA" />\r\n                            </div>\r\n                        </td>\r\n                        <td>\r\n                            <div class="form-group col-md-12">\r\n                              <input type="number" readonly class="form-control" formControlName="subTotalofLandCostB"  [(ngModel)]="formThreeBDetails.subTotalofLandCostB" />\r\n                            </div>\r\n                        </td>\r\n                        <td>\r\n                          <div class="form-group col-md-12">\r\n                            <input type="number" class="form-control" formControlName="subTotalofLandCostC"  [(ngModel)]="formThreeBDetails.subTotalofLandCostC" />\r\n                            <div class="error-box" *ngIf="isFieldInvalid(\'subTotalofLandCostC\')"><small class="error"> This field is required </small>\r\n                            </div>\r\n                          </div>\r\n                        </td>\r\n                        <td>\r\n                            <div class="form-group col-md-12">\r\n                              <div *ngIf="formThreeForm?.controls?.subTotalofLandCostC.value;else zeroData1">\r\n                                {{formatValue(formThreeBDetails.subTotalofLandCostC - formThreeBDetails.subTotalofLandCostB)}}\r\n                              </div>\r\n                              <ng-template #zeroData1><span>0</span></ng-template>\r\n                            </div>\r\n                          </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>2</td>\r\n                        <td>Development Cost (Sr No 1 (ii))</td>\r\n                        <td>\r\n                            <div class="form-group col-md-12">\r\n                              <input type="number" readonly class="form-control" formControlName="subTotofDevelopCostA"  [(ngModel)]="formThreeBDetails.subTotofDevelopCostA" />\r\n                            </div>\r\n                        </td>\r\n                        <td>\r\n                            <div class="form-group col-md-12">\r\n                              <input type="number" readonly class="form-control" formControlName="subTotofDevelopCostB"  [(ngModel)]="formThreeBDetails.subTotofDevelopCostB" />\r\n                            </div>\r\n                        </td>\r\n                        <td>\r\n                          <div class="form-group col-md-12">\r\n                            <input type="number" class="form-control" formControlName="subTotofDevelopCostC"  [(ngModel)]="formThreeBDetails.subTotofDevelopCostC" />\r\n                            <div class="error-box" *ngIf="isFieldInvalid(\'subTotofDevelopCostC\')"><small class="error"> This field is required </small>\r\n                            </div>\r\n                          </div>\r\n                        </td>\r\n                        <td>\r\n                            <div class="form-group col-md-12">\r\n                              <div *ngIf="formThreeForm?.controls?.subTotofDevelopCostC.value;else zeroData2">\r\n                                {{formatValue(formThreeBDetails.subTotofDevelopCostC - formThreeBDetails.subTotofDevelopCostB)}}\r\n                              </div>\r\n                              <ng-template #zeroData2><span>0</span></ng-template>\r\n                            </div>\r\n                          </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>3</td>\r\n                        <td>Other Cost (Admin, Marketing, Intrest on Partners capital etc) <br> Other than Form-3</td>\r\n                        <td>\r\n                            <div class="form-group col-md-12">\r\n                              <input type="number" class="form-control" formControlName="estimatedOtherCost"  [(ngModel)]="formThreeBDetails.estimatedOtherCost" />\r\n                              <div class="error-box" *ngIf="isFieldInvalid(\'estimatedOtherCost\')"><small class="error"> This field is required </small>\r\n                              </div>\r\n                            </div>\r\n                        </td>\r\n                        <td>\r\n                            <div class="form-group col-md-12">\r\n                              <input type="number" class="form-control" formControlName="incurredOtherCostLastQpr"  [(ngModel)]="formThreeBDetails.incurredOtherCostLastQpr" />\r\n                              <div class="error-box" *ngIf="isFieldInvalid(\'incurredOtherCostLastQpr\')"><small class="error"> This field is required </small>\r\n                              </div>\r\n                            </div>\r\n                        </td>\r\n                        <td>\r\n                          <div class="form-group col-md-12">\r\n                            <input type="number" class="form-control" formControlName="incurredOtherCostThisQpr"  [(ngModel)]="formThreeBDetails.incurredOtherCostThisQpr" />\r\n                            <div class="error-box" *ngIf="isFieldInvalid(\'incurredOtherCostThisQpr\')"><small class="error"> This field is required </small>\r\n                            </div>\r\n                          </div>\r\n                        </td>\r\n                        <td>\r\n                            <div class="form-group col-md-12">\r\n                              <div *ngIf="formThreeForm?.controls?.subTotofDevelopCostC?.value;else zeroData3">\r\n                                {{formatValue(formThreeBDetails.incurredOtherCostThisQpr - formThreeBDetails.incurredOtherCostLastQpr)}}\r\n                              </div>\r\n                              <ng-template #zeroData3><span>0</span></ng-template>\r\n                            </div>\r\n                          </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td class="border-bottom"></td>\r\n                        <td class="border-bottom"><b>Total Cost (Sr no 1+2+3)</b></td>\r\n                        <td class="border-bottom">\r\n                            <div class="form-group col-md-12">\r\n                                  <b>{{formatValue(formThreeBDetails.subTotalofLandCostA + formThreeBDetails.subTotofDevelopCostA + formThreeBDetails.estimatedOtherCost)}}</b>\r\n                              </div>\r\n                        </td>\r\n                        <td class="border-bottom">\r\n                            <div class="form-group col-md-12">\r\n                                <b>{{formatValue(formThreeBDetails.subTotalofLandCostB + formThreeBDetails.subTotofDevelopCostB + formThreeBDetails.incurredOtherCostLastQpr)}}</b>\r\n                              </div>\r\n                        </td>\r\n                        <td class="border-bottom">\r\n                            <div class="form-group col-md-12" *ngIf="formThreeBDetails.subTotalofLandCostC && formThreeBDetails.subTotofDevelopCostC && formThreeBDetails.incurredOtherCostThisQpr;else zeroData4">\r\n                                <b>{{formatValue(formThreeBDetails.subTotalofLandCostC + formThreeBDetails.subTotofDevelopCostC + formThreeBDetails.incurredOtherCostThisQpr)}}</b>\r\n                              </div>\r\n                              <ng-template #zeroData4><span>0</span></ng-template>\r\n                        </td>\r\n                        <td class="border-bottom">\r\n                            <div class="form-group col-md-12" *ngIf="formThreeBDetails.subTotalofLandCostC && formThreeBDetails.subTotofDevelopCostC && formThreeBDetails.incurredOtherCostThisQpr;else zeroData5">\r\n                                <b>{{formatValue((formThreeBDetails.subTotalofLandCostC - formThreeBDetails.subTotalofLandCostB) + (formThreeBDetails.subTotofDevelopCostC - formThreeBDetails.subTotofDevelopCostB) + (formThreeBDetails.incurredOtherCostThisQpr - formThreeBDetails.incurredOtherCostLastQpr))}}</b>\r\n                              </div>\r\n                              <ng-template #zeroData5 style="margin-left: 8px;"><span>0</span></ng-template>\r\n                          </td>\r\n                      </tr>\r\n                      <tr></tr>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n  \r\n            <div class="row" style="width:100%">\r\n              <div class="col-md-12 text-center">\r\n                <br>\r\n                <a href="javascript:void(0);" title="Back">\r\n                  <button class="btn btn-primary" (click)="back()" [disabled]="disableButton">Previous</button>&nbsp; \r\n                  <button class="btn btn-primary" (click)="saveApplicationFund()" [disabled]="disableButton">Save & Next</button>&nbsp; \r\n                </a>\r\n              </div>\r\n              <br>\r\n            </div>          \r\n            <br>\r\n          </div>\r\n        </div>\r\n        </form>\r\n    </div>\r\n  </div>\r\n\r\n  <div class="row mt-4 mb-4" *ngIf="step == 3">\r\n    <div class="col-md-12 mt-8">\r\n      <form [formGroup]="mofForm" id="validateForm">\r\n          <div class="card shadow">\r\n            <div class="card-header"><strong>Form 3B - MoF Sheet (Sources of Fund)</strong></div>\r\n            <div class="card-body">\r\n              <div class="table-responsive">\r\n                <table class="table table-bordered" > \r\n                  <thead class="bg-light">\r\n                    <tr>\r\n                      <td>Sr.No.</td>\r\n                      <td>Perticulars</td>\r\n                      <td>Estimated Amount at the time of <br> Registration / Alteration<sup>*</sup></td>\r\n                      <td>Estimated (as on date of <br> Last QPR)<sup>*</sup></td>\r\n                      <td>Actual (as on date of <br> this QPR)<sup>*</sup></td>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                      <tr>\r\n                        <td>1</td>\r\n                        <td>Own Funds </td>\r\n                        <td>\r\n                            <div class="form-group col-md-12">\r\n                              <input type="number" class="form-control" formControlName="ownedFund"  [(ngModel)]="formThreeModelMf.ownedFund" />\r\n                              <div class="error-box" *ngIf="isMofFieldInvalid(\'ownedFund\')"><small class="error"> This field is required </small>\r\n                              </div>\r\n                            </div>\r\n                        </td>\r\n                        <td>\r\n                            <div class="form-group col-md-12">\r\n                              <input type="number" class="form-control" formControlName="estimatedOwnFundLastQpr"  [(ngModel)]="formThreeModelMf.estimatedOwnFundLastQpr" />\r\n                              <div class="error-box" *ngIf="isMofFieldInvalid(\'estimatedOwnFundLastQpr\')"><small class="error"> This field is required </small>\r\n                              </div>\r\n                            </div>\r\n                        </td>\r\n                        <td>\r\n                          <div class="form-group col-md-12">\r\n                            <input type="number" class="form-control" formControlName="ownFundIncurred"  [(ngModel)]="formThreeModelMf.ownFundIncurred" />\r\n                            <div class="error-box" *ngIf="isMofFieldInvalid(\'ownFundIncurred\')"><small class="error"> This field is required </small>\r\n                            </div>\r\n                          </div>\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>2</td>\r\n                        <td>Total Borrowed Fund (secured)</td>\r\n                        <td>\r\n                            <div class="form-group col-md-12">\r\n                              <input type="number" class="form-control" formControlName="borrowedSecuredFund"  [(ngModel)]="formThreeModelMf.borrowedSecuredFund" />\r\n                              <div class="error-box" *ngIf="isMofFieldInvalid(\'borrowedSecuredFund\')"><small class="error"> This field is required </small>\r\n                              </div>\r\n                            </div>\r\n                        </td>\r\n                        <td>\r\n                            <div class="form-group col-md-12">\r\n                              <input type="number" class="form-control" formControlName="estimatedBorrowedSecuredFundLastQpr"  [(ngModel)]="formThreeModelMf.estimatedBorrowedSecuredFundLastQpr" />\r\n                              <div class="error-box" *ngIf="isMofFieldInvalid(\'estimatedBorrowedSecuredFundLastQpr\')"><small class="error"> This field is required </small>\r\n                              </div>\r\n                            </div>\r\n                        </td>\r\n                        <td>\r\n                          <div class="form-group col-md-12">\r\n                            <input type="number" class="form-control" formControlName="borrowedSecuredFundIncurred"  [(ngModel)]="formThreeModelMf.borrowedSecuredFundIncurred" />\r\n                            <div class="error-box" *ngIf="isMofFieldInvalid(\'borrowedSecuredFundIncurred\')"><small class="error"> This field is required </small>\r\n                            </div>\r\n                          </div>\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>3</td>\r\n                        <td>Total Borrowed Fund (unsecured)</td>\r\n                        <td>\r\n                            <div class="form-group col-md-12">\r\n                              <input type="number" class="form-control" formControlName="borrowedUnSecuredFund"  [(ngModel)]="formThreeModelMf.borrowedUnSecuredFund" />\r\n                              <div class="error-box" *ngIf="isMofFieldInvalid(\'borrowedUnSecuredFund\')"><small class="error"> This field is required </small>\r\n                              </div>\r\n                            </div>\r\n                        </td>\r\n                        <td>\r\n                            <div class="form-group col-md-12">\r\n                              <input type="number" class="form-control" formControlName="estimatedBorrowedUnSecuredFundLastQpr"  [(ngModel)]="formThreeModelMf.estimatedBorrowedUnSecuredFundLastQpr" />\r\n                              <div class="error-box" *ngIf="isMofFieldInvalid(\'estimatedBorrowedUnSecuredFundLastQpr\')"><small class="error"> This field is required </small>\r\n                              </div>\r\n                            </div>\r\n                        </td>\r\n                        <td>\r\n                          <div class="form-group col-md-12">\r\n                            <input type="number" class="form-control" formControlName="borrowedUnSecuredFundIncurred"  [(ngModel)]="formThreeModelMf.borrowedUnSecuredFundIncurred" />\r\n                            <div class="error-box" *ngIf="isMofFieldInvalid(\'borrowedUnSecuredFundIncurred\')"><small class="error"> This field is required </small>\r\n                            </div>\r\n                          </div>\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>4</td>\r\n                        <td>Customer receipts used for the project</td>\r\n                        <td>\r\n                            <div class="form-group col-md-12">\r\n                              <input type="number" class="form-control" formControlName="customerReceipts"  [(ngModel)]="formThreeModelMf.customerReceipts" />\r\n                              <div class="error-box" *ngIf="isMofFieldInvalid(\'customerReceipts\')"><small class="error"> This field is required </small>\r\n                              </div>\r\n                            </div>\r\n                        </td>\r\n                        <td>\r\n                            <div class="form-group col-md-12">\r\n                              <input type="number" class="form-control" formControlName="estimatedCustomerReceiptsLastQpr"  [(ngModel)]="formThreeModelMf.estimatedCustomerReceiptsLastQpr" />\r\n                              <div class="error-box" *ngIf="isMofFieldInvalid(\'estimatedCustomerReceiptsLastQpr\')"><small class="error"> This field is required </small>\r\n                              </div>\r\n                            </div>\r\n                        </td>\r\n                        <td>\r\n                          <div class="form-group col-md-12">\r\n                            <input type="number" class="form-control" formControlName="customerReceiptsIncurred"  [(ngModel)]="formThreeModelMf.customerReceiptsIncurred" />\r\n                            <div class="error-box" *ngIf="isMofFieldInvalid(\'customerReceiptsIncurred\')"><small class="error"> This field is required </small>\r\n                            </div>\r\n                          </div>\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td></td>\r\n                        <td><b>Total Funds for the project</b></td>\r\n                        <td>\r\n                            <div class="form-group col-md-12" *ngIf="formThreeModelMf.ownedFund || formThreeModelMf.borrowedSecuredFund || formThreeModelMf.borrowedUnSecuredFund || formThreeModelMf.customerReceipts;else zeroData6">\r\n                                <b>{{formatValue(formThreeModelMf.ownedFund + formThreeModelMf.borrowedSecuredFund + formThreeModelMf.borrowedUnSecuredFund + formThreeModelMf.customerReceipts)}}</b>\r\n                            </div>\r\n                            <ng-template #zeroData6><span>0</span></ng-template>\r\n                        </td>\r\n                        <td>\r\n                            <div class="form-group col-md-12" *ngIf="formThreeModelMf.estimatedOwnFundLastQpr || formThreeModelMf.estimatedBorrowedSecuredFundLastQpr || formThreeModelMf.estimatedBorrowedUnSecuredFundLastQpr || formThreeModelMf.estimatedCustomerReceiptsLastQpr;else zeroData7">\r\n                                <b>{{formatValue(formThreeModelMf.estimatedOwnFundLastQpr + formThreeModelMf.estimatedBorrowedSecuredFundLastQpr + formThreeModelMf.estimatedBorrowedUnSecuredFundLastQpr + formThreeModelMf.estimatedCustomerReceiptsLastQpr)}}</b>\r\n                            </div>\r\n                            <ng-template #zeroData7><span>0</span></ng-template>\r\n                        </td>\r\n                        <td>\r\n                            <div class="form-group col-md-12" *ngIf="formThreeModelMf.ownFundIncurred || formThreeModelMf.borrowedSecuredFundIncurred || formThreeModelMf.borrowedUnSecuredFundIncurred || formThreeModelMf.customerReceiptsIncurred; else zeroData8">\r\n                                <b>{{formatValue(formThreeModelMf.ownFundIncurred + formThreeModelMf.borrowedSecuredFundIncurred + formThreeModelMf.borrowedUnSecuredFundIncurred + formThreeModelMf.customerReceiptsIncurred)}}</b>\r\n                            </div>\r\n                            <ng-template #zeroData8><span>0</span></ng-template>\r\n                        </td>\r\n                      </tr>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n  \r\n            <div class="row" style="width:100%">\r\n              <div class="col-md-12 text-center">\r\n                <br>\r\n                <a href="javascript:void(0);" title="Back">\r\n                    <button class="btn btn-primary" (click)="back()" [disabled]="disableButton">Previous</button>&nbsp; \r\n                    <button class="btn btn-primary" (click)="submit()" [disabled]="disableButton">Save & Submit</button>&nbsp; \r\n                </a>\r\n              </div>\r\n              <br>\r\n            </div>          \r\n            <br>\r\n          </div>\r\n        </div>\r\n        </form>\r\n    </div>\r\n  </div>\r\n  <app-loader *ngIf="loadingSpinner"></app-loader>\r\n  <app-validation-message [message]="inputJson"></app-validation-message>'},LW2C:function(e,r,t){"use strict";t.r(r),r.default='\r\n<div class="row mt-4 mb-4">\r\n    <div class="col-md-12 mt-8" *ngIf="formOneB">\r\n      <form [formGroup]="commonAreaWorkForm" id="validateForm">\r\n          <div class="card shadow" #myDiv>\r\n            <div class="card-header"><strong>Development in Common Area</strong></div>\r\n            <div class="card-body">\r\n              <div class="table-responsive">\r\n                <table class="table table-bordered" > \r\n                  <thead class="bg-light">\r\n                    <tr>\r\n                      <td>Sr.No.</td>\r\n                      <td style="width: 38%">Perticular</td>\r\n                      <td>Proposed (Yes / No)<sup>*</sup></td>\r\n                      <td>Work done %<sup>*</sup></td>\r\n                      <td>Remarks</td>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                      <tr>\r\n                        <td>1</td>\r\n                        <td>Street Lighting & Electrical fittings to Common Areas</td>\r\n                        <td>\r\n                          <div class="form-group col-md-12">\r\n                            <label class="radio-lbl">\r\n                              <input type="radio" class="form-control" (change)="onRadioChange($event.target.value, 1)" formControlName="streetLightingYesNo" value="YES"> Yes\r\n                            </label>\r\n                            <label class="radio-lbl">\r\n                              <input type="radio" class="form-control" (change)="onRadioChange($event.target.value, 1)" formControlName="streetLightingYesNo" value="NO"> No\r\n                            </label>\r\n                          </div>\r\n                        </td>\r\n                        <td>\r\n                          <div class="form-group col-md-12">\r\n                            <input type="number" class="form-control" [readonly]="disableFields?.streetLightingYesNo" formControlName="streetLightingWorkDone"  [(ngModel)]="formOneB.streetLightingWorkDone" />\r\n                            <div *ngIf="streetLightingWorkDone?.errors && (streetLightingWorkDone?.dirty || streetLightingWorkDone?.touched || isSubmitted)" class="error">\r\n                              <div *ngIf="streetLightingWorkDone?.hasError(\'required\')">\r\n                                Work done % is required\r\n                              </div>\r\n                              <div *ngIf="streetLightingWorkDone?.hasError(\'max\')">\r\n                                Should be less than or equal to 100\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </td>\r\n                        <td>\r\n                            <div class="form-group col-md-12">\r\n                                <input type="text" class="form-control" formControlName="streetLightingRemarks"  [(ngModel)]="formOneB.streetLightingRemarks" />\r\n                              </div>\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>2</td>\r\n                        <td>Compound Wall</td>\r\n                        <td>\r\n                          <div class="form-group col-md-12">\r\n                            <label class="radio-lbl">\r\n                              <input type="radio" class="form-control" (change)="onRadioChange($event.target.value, 2)" formControlName="compoundWallYesNo" value="YES"> Yes\r\n                            </label>\r\n                            <label class="radio-lbl">\r\n                              <input type="radio" class="form-control" (change)="onRadioChange($event.target.value, 2)" formControlName="compoundWallYesNo" value="NO"> No\r\n                            </label>\r\n                          </div>\r\n                        </td>\r\n                        <td>\r\n                          <div class="form-group col-md-12">\r\n                            <input type="number" class="form-control" [readonly]="disableFields?.compoundWallYesNo" formControlName="compoundWallWorkDone"  [(ngModel)]="formOneB.compoundWallWorkDone" />\r\n                            <div *ngIf="compoundWallWorkDone?.errors && (compoundWallWorkDone?.dirty || compoundWallWorkDone?.touched || isSubmitted)" class="error">\r\n                              <div *ngIf="compoundWallWorkDone?.hasError(\'required\')">\r\n                                Work done % is required\r\n                              </div>\r\n                              <div *ngIf="compoundWallWorkDone?.hasError(\'max\')">\r\n                                Should be less than or equal to 100\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </td>\r\n                        <td>\r\n                            <div class="form-group col-md-12">\r\n                                <input type="text" class="form-control" formControlName="compoundWallRemarks"  [(ngModel)]="formOneB.compoundWallRemarks" />\r\n                              </div>\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>3</td>\r\n                        <td>Plinth protection, paving of areas appurtenant to Building/Wing, Margin area etc</td>\r\n                        <td>\r\n                          <div class="form-group col-md-12">\r\n                            <label class="radio-lbl">\r\n                              <input type="radio" class="form-control" (change)="onRadioChange($event.target.value, 3)" formControlName="plinthProtectionYesNo" value="YES"> Yes\r\n                            </label>\r\n                            <label class="radio-lbl">\r\n                              <input type="radio" class="form-control" (change)="onRadioChange($event.target.value, 3)" formControlName="plinthProtectionYesNo" value="NO"> No\r\n                            </label>\r\n                          </div>\r\n                        </td>\r\n                        <td>\r\n                          <div class="form-group col-md-12">\r\n                            <input type="number" class="form-control" [readonly]="disableFields?.plinthProtectionYesNo" formControlName="plinthProtectionWorkDone"  [(ngModel)]="formOneB.plinthProtectionWorkDone" />\r\n                            <div *ngIf="plinthProtectionWorkDone?.errors && (plinthProtectionWorkDone?.dirty || plinthProtectionWorkDone?.touched || isSubmitted)" class="error">\r\n                              <div *ngIf="plinthProtectionWorkDone?.hasError(\'required\')">\r\n                                Work done % is required\r\n                              </div>\r\n                              <div *ngIf="plinthProtectionWorkDone?.hasError(\'max\')">\r\n                                Should be less than or equal to 100\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </td>\r\n                        <td>\r\n                            <div class="form-group col-md-12">\r\n                                <input type="text" class="form-control" formControlName="plinthProtectionRemarks"  [(ngModel)]="formOneB.plinthProtectionRemarks" />\r\n                              </div>\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>4</td>\r\n                        <td>Overhead and Underground Water Tanks</td>\r\n                        <td>\r\n                          <div class="form-group col-md-12">\r\n                            <label class="radio-lbl">\r\n                              <input type="radio" class="form-control" (change)="onRadioChange($event.target.value, 4)" formControlName="waterTankYesNo" value="YES"> Yes\r\n                            </label>\r\n                            <label class="radio-lbl">\r\n                              <input type="radio" class="form-control" (change)="onRadioChange($event.target.value, 4)" formControlName="waterTankYesNo" value="NO"> No\r\n                            </label>\r\n                          </div>\r\n                        </td>\r\n                        <td>\r\n                          <div class="form-group col-md-12">\r\n                            <input type="number" class="form-control" [readonly]="disableFields?.waterTankYesNo" formControlName="waterTankWorkDone"  [(ngModel)]="formOneB.waterTankWorkDone" />\r\n                            <div *ngIf="waterTankWorkDone?.errors && (waterTankWorkDone?.dirty || waterTankWorkDone?.touched || isSubmitted)" class="error">\r\n                              <div *ngIf="waterTankWorkDone?.hasError(\'required\')">\r\n                                Work done % is required\r\n                              </div>\r\n                              <div *ngIf="waterTankWorkDone?.hasError(\'max\')">\r\n                                Should be less than or equal to 100\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </td>\r\n                        <td>\r\n                            <div class="form-group col-md-12">\r\n                                <input type="text" class="form-control" formControlName="waterTankRemarks"  [(ngModel)]="formOneB.waterTankRemarks" />\r\n                              </div>\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>5</td>\r\n                        <td>Internal Water supply Network</td>\r\n                        <td>\r\n                          <div class="form-group col-md-12">\r\n                            <label class="radio-lbl">\r\n                              <input type="radio" class="form-control" (change)="onRadioChange($event.target.value, 5)" formControlName="waterSupplyYesNo" value="YES"> Yes\r\n                            </label>\r\n                            <label class="radio-lbl">\r\n                              <input type="radio" class="form-control" (change)="onRadioChange($event.target.value, 5)" formControlName="waterSupplyYesNo" value="NO"> No\r\n                            </label>\r\n                          </div>\r\n                        </td>\r\n                        <td>\r\n                          <div class="form-group col-md-12">\r\n                            <input type="number" class="form-control" [readonly]="disableFields?.waterSupplyYesNo" formControlName="waterSupplyWorkDone"  [(ngModel)]="formOneB.waterSupplyWorkDone" />\r\n                            <div *ngIf="waterSupplyWorkDone?.errors && (waterSupplyWorkDone?.dirty || waterSupplyWorkDone?.touched || isSubmitted)" class="error">\r\n                              <div *ngIf="waterSupplyWorkDone?.hasError(\'required\')">\r\n                                Work done % is required\r\n                              </div>\r\n                              <div *ngIf="waterSupplyWorkDone?.hasError(\'max\')">\r\n                                Should be less than or equal to 100\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </td>\r\n                        <td>\r\n                            <div class="form-group col-md-12">\r\n                                <input type="text" class="form-control" formControlName="waterSupplyRemarks"  [(ngModel)]="formOneB.waterSupplyRemarks" />\r\n                              </div>\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>6</td>\r\n                        <td>Internal Sewerage (chamber, lines, Septic Tank, STP) Networks</td>\r\n                        <td>\r\n                          <div class="form-group col-md-12">\r\n                            <label class="radio-lbl">\r\n                              <input type="radio" class="form-control" (change)="onRadioChange($event.target.value, 6)" formControlName="sewerageYesNo" value="YES"> Yes\r\n                            </label>\r\n                            <label class="radio-lbl">\r\n                              <input type="radio" class="form-control" (change)="onRadioChange($event.target.value, 6)" formControlName="sewerageYesNo" value="NO"> No\r\n                            </label>\r\n                          </div>\r\n                        </td>\r\n                        <td>\r\n                          <div class="form-group col-md-12">\r\n                            <input type="number" class="form-control" [readonly]="disableFields?.sewerageYesNo" formControlName="sewerageWorkDone"  [(ngModel)]="formOneB.sewerageWorkDone" />\r\n                            <div *ngIf="sewerageWorkDone?.errors && (sewerageWorkDone?.dirty || sewerageWorkDone?.touched || isSubmitted)" class="error">\r\n                              <div *ngIf="sewerageWorkDone?.hasError(\'required\')">\r\n                                Work done % is required\r\n                              </div>\r\n                              <div *ngIf="sewerageWorkDone?.hasError(\'max\')">\r\n                                Should be less than or equal to 100\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </td>\r\n                        <td>\r\n                            <div class="form-group col-md-12">\r\n                                <input type="text" class="form-control" formControlName="sewerageRemarks"  [(ngModel)]="formOneB.sewerageRemarks" />\r\n                              </div>\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>7</td>\r\n                        <td>Storm Water Drains</td>\r\n                        <td>\r\n                          <div class="form-group col-md-12">\r\n                            <label class="radio-lbl">\r\n                              <input type="radio" class="form-control" (change)="onRadioChange($event.target.value, 7)" formControlName="stormWaterDrainsYesNo" value="YES"> Yes\r\n                            </label>\r\n                            <label class="radio-lbl">\r\n                              <input type="radio" class="form-control" (change)="onRadioChange($event.target.value, 7)" formControlName="stormWaterDrainsYesNo" value="NO"> No\r\n                            </label>\r\n                          </div>\r\n                        </td>\r\n                        <td>\r\n                          <div class="form-group col-md-12">\r\n                            <input type="number" class="form-control" [readonly]="disableFields?.stormWaterDrainsYesNo" formControlName="stormWaterDrainsWorkDone"  [(ngModel)]="formOneB.stormWaterDrainsWorkDone" />\r\n                            <div *ngIf="stormWaterDrainsWorkDone?.errors && (stormWaterDrainsWorkDone?.dirty || stormWaterDrainsWorkDone?.touched || isSubmitted)" class="error">\r\n                              <div *ngIf="stormWaterDrainsWorkDone?.hasError(\'required\')">\r\n                                Work done % is required\r\n                              </div>\r\n                              <div *ngIf="stormWaterDrainsWorkDone?.hasError(\'max\')">\r\n                                Should be less than or equal to 100\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </td>\r\n                        <td>\r\n                            <div class="form-group col-md-12">\r\n                                <input type="text" class="form-control" formControlName="stormWaterDrainsRemarks"  [(ngModel)]="formOneB.stormWaterDrainsRemarks" />\r\n                              </div>\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>8</td>\r\n                        <td>Internal Roads and Footpaths</td>\r\n                        <td>\r\n                          <div class="form-group col-md-12">\r\n                            <label class="radio-lbl">\r\n                              <input type="radio" class="form-control" (change)="onRadioChange($event.target.value, 8)" formControlName="internalRoadYesNo" value="YES"> Yes\r\n                            </label>\r\n                            <label class="radio-lbl">\r\n                              <input type="radio" class="form-control" (change)="onRadioChange($event.target.value, 8)" formControlName="internalRoadYesNo" value="NO"> No\r\n                            </label>\r\n                          </div>\r\n                        </td>\r\n                        <td>\r\n                          <div class="form-group col-md-12">\r\n                            <input type="number" class="form-control" [readonly]="disableFields?.internalRoadYesNo" formControlName="internalRoadWorkDone"  [(ngModel)]="formOneB.internalRoadWorkDone" />\r\n                            <div *ngIf="internalRoadWorkDone?.errors && (internalRoadWorkDone?.dirty || internalRoadWorkDone?.touched || isSubmitted)" class="error">\r\n                              <div *ngIf="internalRoadWorkDone?.hasError(\'required\')">\r\n                                Work done % is required\r\n                              </div>\r\n                              <div *ngIf="internalRoadWorkDone?.hasError(\'max\')">\r\n                                Should be less than or equal to 100\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </td>\r\n                        <td>\r\n                            <div class="form-group col-md-12">\r\n                                <input type="text" class="form-control" formControlName="internalRoadRemarks"  [(ngModel)]="formOneB.internalRoadRemarks" />\r\n                              </div>\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>9</td>\r\n                        <td>Landscaping & Tree Planting</td>\r\n                        <td>\r\n                          <div class="form-group col-md-12">\r\n                            <label class="radio-lbl">\r\n                              <input type="radio" class="form-control" (change)="onRadioChange($event.target.value, 9)" formControlName="landscapingYesNo" value="YES"> Yes\r\n                            </label>\r\n                            <label class="radio-lbl">\r\n                              <input type="radio" class="form-control" (change)="onRadioChange($event.target.value, 9)" formControlName="landscapingYesNo" value="NO"> No\r\n                            </label>\r\n                          </div>\r\n                        </td>\r\n                        <td>\r\n                          <div class="form-group col-md-12">\r\n                            <input type="number" class="form-control" [readonly]="disableFields?.landscapingYesNo" formControlName="landscapingWorkDone"  [(ngModel)]="formOneB.landscapingWorkDone" />\r\n                            <div *ngIf="landscapingWorkDone?.errors && (landscapingWorkDone?.dirty || landscapingWorkDone?.touched || isSubmitted)" class="error">\r\n                              <div *ngIf="landscapingWorkDone?.hasError(\'required\')">\r\n                                Work done % is required\r\n                              </div>\r\n                              <div *ngIf="landscapingWorkDone?.hasError(\'max\')">\r\n                                Should be less than or equal to 100\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </td>\r\n                        <td>\r\n                            <div class="form-group col-md-12">\r\n                                <input type="text" class="form-control" formControlName="landscapingRemarks"  [(ngModel)]="formOneB.landscapingRemarks" />\r\n                              </div>\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>10</td>\r\n                        <td>other requirements as may be required to Obtain Occupation/Completion Certificate</td>\r\n                        <td>\r\n                          <div class="form-group col-md-12">\r\n                            <label class="radio-lbl">\r\n                              <input type="radio" class="form-control" (change)="onRadioChange($event.target.value, 10)" formControlName="otherRequirementYesNo" value="YES"> Yes\r\n                            </label>\r\n                            <label class="radio-lbl">\r\n                              <input type="radio" class="form-control" (change)="onRadioChange($event.target.value, 10)" formControlName="otherRequirementYesNo" value="NO"> No\r\n                            </label>\r\n                          </div>\r\n                        </td>\r\n                        <td>\r\n                          <div class="form-group col-md-12">\r\n                            <input type="number" class="form-control" [readonly]="disableFields?.otherRequirementYesNo" formControlName="otherRequirementWorkDone"  [(ngModel)]="formOneB.otherRequirementWorkDone" />\r\n                            <div *ngIf="otherRequirementWorkDone?.errors && (otherRequirementWorkDone?.dirty || otherRequirementWorkDone?.touched || isSubmitted)" class="error">\r\n                              <div *ngIf="otherRequirementWorkDone?.hasError(\'required\')">\r\n                                Work done % is required\r\n                              </div>\r\n                              <div *ngIf="otherRequirementWorkDone?.hasError(\'max\')">\r\n                                Should be less than or equal to 100\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </td>\r\n                        <td>\r\n                            <div class="form-group col-md-12">\r\n                                <input type="text" class="form-control" formControlName="otherRequirementRemarks"  [(ngModel)]="formOneB.otherRequirementRemarks" />\r\n                              </div>\r\n                        </td>\r\n                      </tr>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n  \r\n            <div class="row" style="width:100%">\r\n              <div class="col-md-12 text-center">\r\n                <br>\r\n                <a href="javascript:void(0);" title="Back">\r\n                  <button class="btn btn-primary" (click)="back()" [disabled]="disableButton">Previous</button>&nbsp; \r\n                  <button class="btn btn-primary" (click)="next()" [disabled]="disableButton">Save Form 1B & Next</button>&nbsp; \r\n                </a>\r\n              </div>\r\n              <br>\r\n            </div>          \r\n            <br>\r\n          </div>\r\n        </div>\r\n        </form>\r\n    </div>\r\n  </div>\r\n  <app-validation-message [message]="inputJson"></app-validation-message>\r\n  <app-loader *ngIf="loadingSpinner"></app-loader>\r\n\r\n\r\n'},PLB7:function(e,r,t){"use strict";t.r(r),r.default='\r\n<div>\r\n    <div class="d-flex justify-content-between align-items-center">\r\n        <h2>QPR Simplification</h2>\r\n    </div>\r\n\r\n    <div class="row mt-4 mb-4">\r\n        <div class="col-md-12 mt-8">\r\n          <div class="card shadow">\r\n            <div class="card-header"><strong>Details of Project</strong></div>\r\n            <div class="card-body">\r\n\r\n              <div class="row">\r\n\r\n                <div class="col-md-12 mb-4">\r\n                  <div class="col-md-4 mb-3">\r\n                    <label class="control-label font-weight-bold">Project Type : Residential Affordable Housing</label>\r\n                    <input type="text" readonly class="form-control" value="{{projectDetails?.affordableHousing}}">\r\n                  </div>\r\n                  <div class="col-md-4 mb-3">\r\n                    <label class="control-label font-weight-bold">Project Registration No</label>\r\n                    <input type="text" readonly class="form-control" value="{{projectDetails?.projectRegNo}}">\r\n                  </div>\r\n                  <div class="col-md-4 mb-3">\r\n                    <label class="control-label font-weight-bold">Project Name</label>\r\n                    <input type="text" readonly class="form-control" value="{{projectDetails?.projectName}}">\r\n                  </div>\r\n                  <div class="col-md-4 mb-3">\r\n                    <label class="control-label font-weight-bold">Use</label>\r\n                    <input type="text" readonly class="form-control" value="{{projectDetails?.projectType}}">\r\n                  </div>\r\n                  <div class="col-md-4 mb-3">\r\n                    <label class="control-label font-weight-bold">Number of Blocks</label>\r\n                    <input type="text" readonly class="form-control"\r\n                      value="{{projectDetails?.noOfBlocks}}">\r\n                  </div>\r\n                  <div class="col-md-4 mb-3">\r\n                    <label class="control-label font-weight-bold">Total Estimated Cost of Project (Rs)</label>\r\n                    <input type="text" readonly class="form-control"\r\n                      value="{{projectDetails?.totalProjectCost}}">\r\n                  </div>\r\n\r\n                  <div class="col-md-4 mb-3">\r\n                    <label class="control-label font-weight-bold">Start Date of Project at the time of registration</label>\r\n                    <input type="text" readonly class="form-control"\r\n                      value="{{projectDetails?.projectStartDateStr}}">\r\n                  </div>\r\n\r\n                  <div class="col-md-4 mb-3">\r\n                    <label class="control-label font-weight-bold">End Date of Project at the time of registration</label>\r\n                    <input type="text" readonly class="form-control"\r\n                      value="{{projectDetails?.endDateAtTimeOfRegistrationStr}}">\r\n                  </div>\r\n\r\n                  <div class="col-md-4 mb-3">\r\n                    <label class="control-label font-weight-bold">End Date of Project as per extension if any</label>\r\n                    <input type="text" readonly class="form-control" *ngIf="projectDetails?.endDateAsPerExtension != \'NA\'"\r\n                      value="{{projectDetails?.endDateAsPerExtension | date : \'dd-MM-yyyy\'}}">\r\n                    <input type="text" readonly class="form-control" *ngIf="projectDetails?.endDateAsPerExtension == \'NA\'"\r\n                      value="NA">\r\n                  </div>\r\n                </div>      \r\n                <br>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n    <app-block-details></app-block-details>\r\n    <router-outlet></router-outlet>\r\n</div>'},U2NX:function(e,r,t){"use strict";t.r(r),r.default=".table-bordered {\n  margin: 0;\n  width: 100%;\n}\n\n.table-bordered td {\n  vertical-align: middle;\n}\n\n.card-body .form-group {\n  margin-bottom: 0px;\n}\n\ninput[type=checkbox], input[type=radio] {\n  width: 12%;\n  display: inline-block;\n  margin-left: 12px;\n}\n\n.radio-lbl {\n  display: inline;\n}\n\n.card.shadow .card-header {\n  font-size: 1.8rem;\n  text-transform: capitalize;\n}"},WY6O:function(e,r,t){"use strict";t.r(r);var o=t("mrSG"),n=t("8Y7J"),a=t("SVse"),i=t("xkgV"),l=t("dTlI"),s=t("UPf0"),d=t("iInd"),c=t("2Vo4"),m=t("FvaC"),u=t("vTBr"),h=function(){function e(r,t){_classCallCheck(this,e),this._http=r,this._apiURL=t,this.activeBlock=new c.a({}),this.currentData=this.activeBlock.asObservable(),this.projectDetails=new c.a({}),this.details=this.projectDetails.asObservable(),this.blockDetails=new c.a({}),this.blocks=this.blockDetails.asObservable(),this.formThreeDetails=new c.a({}),this.formThree=this.formThreeDetails.asObservable(),this.formOneCDetails=new c.a({}),this.formOneC=this.formOneCDetails.asObservable()}return _createClass(e,[{key:"getProjectDetails",value:function(e){return this._http.secureget(this._apiURL.qprSimplification+"secure/project-app/get-project-details-for-qpr/"+e)}},{key:"getFormDetails",value:function(e){return this._http.secureget(this._apiURL.qprSimplification+"secure/project-app/get-project-form-details/"+e)}},{key:"getFormOneDetails",value:function(e){return this._http.secureget(this._apiURL.formOneApi+"secure/getfrom-one-details-by-id/"+e)}},{key:"saveDraftFormOne",value:function(e,r){return this._http.securepost(this._apiURL.formOneApi+"secure/save-form-one-details-for-qpr/"+r,e)}},{key:"modifyDraftFormOne",value:function(e){return this._http.securepost(this._apiURL.formOneApi+"secure/modify-form-one-details-for-qpr",e)}},{key:"changeData",value:function(e){this.activeBlock.next(e)}},{key:"projectDetail",value:function(e){this.projectDetails.next(e)}},{key:"updateData",value:function(e){this.blockDetails.next(e)}},{key:"updateFormThree",value:function(e){this.formThreeDetails.next(e)}},{key:"updateFormOneC",value:function(e){this.formOneCDetails.next(e)}},{key:"getOldFormOneDetailsByQtr",value:function(e){return this._http.secureget(this._apiURL.qpr+"secure/openprojectqtr/"+e)}},{key:"getFormOneCDetails",value:function(e,r){return this._http.secureget(this._apiURL.formOneApi+"secure/getfrom-onec-details/QTR_PROCESS/"+e+"/"+r)}},{key:"saveFormOneC",value:function(e){return this._http.securepost(this._apiURL.formOneApi+"secure/save-form-one-c-for-qpr",e)}},{key:"getFormThreeDetails",value:function(e){return this._http.secureget(this._apiURL.formThreeApi+"secure/getform-three-byid"+e)}},{key:"saveFormThree",value:function(e){return this._http.securepost(this._apiURL.formThreeApi+"secure/modify-form-three-details-for-qpr",e)}},{key:"postFormThreeAData",value:function(e){return this._http.secureMultipart(this._apiURL.formThreeApi+"secure/uploadexlfileformthreeforqpr",e)}},{key:"insertFormThreeAData",value:function(e){return this._http.secureput(this._apiURL.formThreeApi+"secure/insertformthreedtlforqpr",e)}},{key:"updateFormThreeIdInQpr",value:function(e){return this._http.securepost(this._apiURL.qpr+"secure/update-form-three-id-in-qpr",e)}},{key:"getFormOneCFilledDetails",value:function(e){return this._http.secureget(this._apiURL.formOneApi+"secure/getfrom-onec-details-by-form-one-id/"+e)}}]),e}();h.ctorParameters=function(){return[{type:u.a},{type:m.a}]},h=o.b([Object(n.B)({providedIn:"root"})],h);var p=function(){function e(r,t){_classCallCheck(this,e),this.apiService=r,this._apiURL=t,this.projectDetails={},this.passValue=new c.a({})}return _createClass(e,[{key:"ngOnInit",value:function(){this.projectId=sessionStorage.getItem("projectId"),this.userType=sessionStorage.getItem("userType"),"PROMOTER"==this.userType&&this.getProjectDetails(this.projectId)}},{key:"getProjectDetails",value:function(e){var r=this;this.apiService.getProjectDetails(e).subscribe((function(e){200==e.status&&(r.projectDetails=e.data,r.projectDetails.projectName=r.projectDetails.projectName?r.projectDetails.projectName:"NA",r.projectDetails.endDateAsPerExtension=r.projectDetails.endDateAsPerExtension?r.projectDetails.endDateAsPerExtension:"NA",sessionStorage.setItem("projectId",r.projectDetails.projectId),r.projectDetails.noOfInventory=0,r.apiService.projectDetail(r.projectDetails))}))}},{key:"formatDate",value:function(e){if(e)return e.split("T")[0]}}]),e}();p.ctorParameters=function(){return[{type:h},{type:m.a}]},p=o.b([Object(n.n)({selector:"app-qpr-details",template:o.c(t("PLB7")).default,styles:[o.c(t("4gsW")).default]})],p);var f=t("s7LF"),v=t("p87Y"),g=function(){function e(r,t,o,n){_classCallCheck(this,e),this.router=r,this._location=t,this._validation=o,this.apiService=n,this.activeBlock={},this.tooltipJson=new c.a({}),this.disableButton=!1,this.inputJson=new c.a({}),this.isPlotted=!1,this.loadingSpinner=!1,this.isSubmitted=!1}return _createClass(e,[{key:"ngOnInit",value:function(){var e=this;this.activeBlockForm=new f.d({totalNoOfSlabs:new f.c("",[f.h.required]),totalNoOfPlinth:new f.c(""),noOfFloors:new f.c("",[f.h.required,f.h.min(0),f.h.max(99)]),noOfInventory:new f.c(null),noOfLifts:new f.c(null,[f.h.required,f.h.min(0),f.h.max(99)]),noOfUnitsBooked:new f.c(null,[f.h.required]),noOfGaragesBooked:new f.c("0",[f.h.required,f.h.pattern(this._validation.numRegex)]),excavationStartDate:new f.c(null,[f.h.required]),excavationActStartDate:new f.c("",[f.h.required]),excavationEndDate:new f.c("",f.h.required),excavationActEndDate:new f.c("",f.h.required),excavationWorkRemarks:new f.c(""),plinthStartDate:new f.c(null,[f.h.required]),plinthEndDate:new f.c("",[f.h.required]),plinthActStartDate:new f.c("",f.h.required),plinthActEndDate:new f.c("",f.h.required),plinthWorkRemarks:new f.c(""),internalStartDate:new f.c(null,[f.h.required]),internalEndDate:new f.c("",[f.h.required]),internalActStartDate:new f.c("",f.h.required),internalActEndDate:new f.c("",f.h.required),internalWorkRemarks:new f.c(""),externalStartDate:new f.c(null,[f.h.required]),externalEndDate:new f.c("",[f.h.required]),externalActStartDate:new f.c("",f.h.required),externalActEndDate:new f.c("",f.h.required),externalWorkRemarks:new f.c(""),commonStartDate:new f.c(null,[f.h.required]),commonEndDate:new f.c("",[f.h.required]),commonActStartDate:new f.c("",f.h.required),commonActEndDate:new f.c("",f.h.required),commonWorkRemarks:new f.c("")}),this.isFormOneGenerated=sessionStorage.getItem("isFormOneGenerated"),this.currentBlockIndex=sessionStorage.getItem("blockIndex"),this.apiService.details.subscribe((function(r){e.projectDetails=r,e.isPlotted=!1,e.projectDetails.projectType&&e.projectDetails.projectType.toLowerCase().includes("plotted")&&(e.isPlotted=!0),e.projectStartDate=e.projectDetails.projectStartDateStr,e.projectEndDate=e.projectDetails.endDateAtTimeOfRegistrationStr})),this.apiService.currentData.subscribe((function(r){if(e.activeBlock=r,e.projectDetails.inventoryCountDetails&&e.projectDetails.inventoryCountDetails.length){var t=e.projectDetails.inventoryCountDetails.find((function(r){return r.block_name===e.activeBlock.blockName}));e.activeBlockForm.patchValue({noOfInventory:t.cnt}),e.setMaxValidator(t.cnt)}e.autoFetchData()})),this.apiService.blocks.subscribe((function(r){e.formOneDetails=r})),this.qtrId=sessionStorage.getItem("quaterId"),this.projectId=sessionStorage.getItem("projectId"),this.returnId=sessionStorage.getItem("qtrReturnId"),setTimeout((function(){e.setMinAndMaxValidatorForDates(),e.isFormOneGenerated?e.getFormOneCFilledDetails():e.getFormOneCDetails()}),2e3)}},{key:"setMinAndMaxValidatorForDates",value:function(){var e=this,r=this.addOneDay(this.projectEndDate);[{name:"excavationStartDate"},{name:"excavationActStartDate"},{name:"excavationActStartDate"},{name:"excavationActEndDate"},{name:"plinthStartDate"},{name:"plinthEndDate"},{name:"plinthActStartDate"},{name:"plinthActEndDate"},{name:"internalStartDate"},{name:"internalEndDate"},{name:"internalActStartDate"},{name:"internalActEndDate"},{name:"externalStartDate"},{name:"externalEndDate"},{name:"externalActStartDate"},{name:"externalActEndDate"},{name:"commonStartDate"},{name:"commonEndDate"},{name:"commonActStartDate"},{name:"commonActEndDate"}].forEach((function(t){var o=e.activeBlockForm.get(t.name);o&&(o.setValidators([f.h.required,e.dateRangeValidator(r)]),o.updateValueAndValidity())}))}},{key:"addOneDay",value:function(e){if(e&&e.includes("-")){var r=_slicedToArray(e.split("-").map(Number),3),t=r[0],o=r[1],n=r[2],a=new Date(n,o-1,t);return a.setDate(a.getDate()+1),a}}},{key:"dateRangeValidator",value:function(e){var r=this;return function(t){if("NA"!=t.value){var o=new Date(t.value),n=new Date(r.projectDetails.projectStartDate),a=e;return isNaN(o.getTime())?{invalidDate:!0}:o<n||o>a?{outOfRange:!0}:null}}}},{key:"formatDate",value:function(e){if(e)return e.split("T")[0]}},{key:"getFormOneCFilledDetails",value:function(){var e=this;this.apiService.getFormOneCFilledDetails(this.formOneDetails.formOneId).subscribe((function(r){if(e.formOneCDetails=r,e.formOneCDetails&&e.formOneCDetails.data){e.garageNo=e.formOneCDetails.data.garageNo;var t=e.activeBlockForm.get("noOfGaragesBooked");t.setValidators([f.h.required,f.h.min(0),f.h.max(e.formOneCDetails.data.garageNo)]),t.updateValueAndValidity()}else e.getFormOneCDetails()}))}},{key:"noOfGaragesBooked",get:function(){return this.activeBlockForm.get("noOfGaragesBooked")}},{key:"getFormOneCDetails",value:function(){var e=this;this.apiService.getFormOneCDetails(this.projectId,this.returnId).subscribe((function(r){if(e.formOneCDetails=r,e.formOneCDetails){var t=e.activeBlockForm.get("noOfGaragesBooked");t.setValidators([f.h.required,f.h.min(0),f.h.max(e.formOneCDetails.garageNo)]),t.updateValueAndValidity(),e.garageNo=e.formOneCDetails.garageNo}}))}},{key:"setMaxValidator",value:function(e){var r=this.activeBlockForm.get("noOfUnitsBooked");r.setValidators([f.h.required,f.h.min(0),f.h.max(e)]),r.updateValueAndValidity()}},{key:"noOfUnitsBooked",get:function(){return this.activeBlockForm.get("noOfUnitsBooked")}},{key:"autoFetchData",value:function(){this.activeBlockForm.patchValue({totalNoOfSlabs:this.activeBlock.totalNoOfSlabs,totalNoOfPlinth:this.activeBlock.totalNoOfPlinth,noOfFloors:this.activeBlock.noOfFloors,noOfLifts:this.activeBlock.noOfLifts,noOfGaragesBooked:this.activeBlock.noOfGaragesBooked?this.activeBlock.noOfGaragesBooked:"0",noOfUnitsBooked:this.activeBlock.noOfUnitsBooked?this.activeBlock.noOfUnitsBooked:"",excavationStartDate:this.activeBlock.excavationStartDate?this.reverseDateIfValid(this.activeBlock.excavationStartDate):"",excavationActStartDate:this.isPlotted?"NA":this.activeBlock.excavationActStartDate,excavationEndDate:this.activeBlock.excavationEndDate?this.reverseDateIfValid(this.activeBlock.excavationEndDate):"",excavationActEndDate:this.isPlotted?"NA":this.activeBlock.excavationActEndDate,excavationWorkRemarks:this.activeBlock.excavationWorkRemarks,plinthStartDate:this.activeBlock.plinthStartDate?this.reverseDateIfValid(this.activeBlock.plinthStartDate):"",plinthEndDate:this.activeBlock.plinthEndDate?this.reverseDateIfValid(this.activeBlock.plinthEndDate):"",plinthActStartDate:this.isPlotted?"NA":this.activeBlock.plinthActStartDate,plinthActEndDate:this.isPlotted?"NA":this.activeBlock.plinthActEndDate,plinthWorkRemarks:this.activeBlock.plinthWorkRemarks,internalStartDate:this.activeBlock.internalStartDate?this.reverseDateIfValid(this.activeBlock.internalStartDate):"",internalEndDate:this.activeBlock.internalEndDate?this.reverseDateIfValid(this.activeBlock.internalEndDate):"",internalActStartDate:this.isPlotted?"NA":this.activeBlock.internalActStartDate,internalActEndDate:this.isPlotted?"NA":this.activeBlock.internalActEndDate,internalWorkRemarks:this.activeBlock.internalWorkRemarks,externalStartDate:this.activeBlock.externalStartDate?this.reverseDateIfValid(this.activeBlock.externalStartDate):"",externalEndDate:this.activeBlock.externalEndDate?this.reverseDateIfValid(this.activeBlock.externalEndDate):"",externalActStartDate:this.isPlotted?"NA":this.activeBlock.externalActStartDate,externalActEndDate:this.isPlotted?"NA":this.activeBlock.externalActEndDate,externalWorkRemarks:this.activeBlock.externalWorkRemarks,commonStartDate:this.activeBlock.commonStartDate,commonEndDate:this.activeBlock.commonEndDate,commonActStartDate:this.isPlotted?"NA":this.activeBlock.commonActStartDate,commonActEndDate:this.isPlotted?"NA":this.activeBlock.commonActEndDate,commonWorkRemarks:this.activeBlock.commonWorkRemarks})}},{key:"openToolTip",value:function(e,r){this.tooltipJson.next({pageX:e.pageX,pageY:e.pageY,code:r})}},{key:"reverseDateIfValid",value:function(e){var r=e.match(/^(\d{2})-(\d{2})-(\d{4})$/);if(r){var t=r[1],o=r[2];return"".concat(r[3],"-").concat(o,"-").concat(t)}return e}},{key:"next",value:function(){var e=this;if(this.isSubmitted=!0,this.isFormOneGenerated=sessionStorage.getItem("isFormOneGenerated"),this.isFormInvalid()){this.loadingSpinner=!0,this.disableButton=!0,this.activeBlock.noOfFloors=this.activeBlockForm.value.noOfFloors,this.activeBlock.noOfLifts=this.activeBlockForm.value.noOfLifts,this.activeBlock.noOfGaragesBooked=this.activeBlockForm.value.noOfGaragesBooked,this.activeBlock.noOfUnitsBooked=this.activeBlockForm.value.noOfUnitsBooked,this.activeBlock.excavationStartDate=this.activeBlockForm.value.excavationStartDate,this.activeBlock.excavationActStartDate=this.activeBlockForm.value.excavationActStartDate,this.activeBlock.excavationEndDate=this.activeBlockForm.value.excavationEndDate,this.activeBlock.excavationActEndDate=this.activeBlockForm.value.excavationActEndDate,this.activeBlock.excavationWorkRemarks=this.activeBlockForm.value.excavationWorkRemarks,this.activeBlock.plinthStartDate=this.activeBlockForm.value.plinthStartDate,this.activeBlock.plinthEndDate=this.activeBlockForm.value.plinthEndDate,this.activeBlock.plinthActStartDate=this.activeBlockForm.value.plinthActStartDate,this.activeBlock.plinthActEndDate=this.activeBlockForm.value.plinthActEndDate,this.activeBlock.plinthWorkRemarks=this.activeBlockForm.value.plinthWorkRemarks,this.activeBlock.internalStartDate=this.activeBlockForm.value.internalStartDate,this.activeBlock.internalEndDate=this.activeBlockForm.value.internalEndDate,this.activeBlock.internalActStartDate=this.activeBlockForm.value.internalActStartDate,this.activeBlock.internalActEndDate=this.activeBlockForm.value.internalActEndDate,this.activeBlock.internalWorkRemarks=this.activeBlockForm.value.internalWorkRemarks,this.activeBlock.externalStartDate=this.activeBlockForm.value.externalStartDate,this.activeBlock.externalEndDate=this.activeBlockForm.value.externalEndDate,this.activeBlock.externalActStartDate=this.activeBlockForm.value.externalActStartDate,this.activeBlock.externalActEndDate=this.activeBlockForm.value.externalActEndDate,this.activeBlock.externalWorkRemarks=this.activeBlockForm.value.externalWorkRemarks,this.activeBlock.commonStartDate=this.activeBlockForm.value.commonStartDate,this.activeBlock.commonEndDate=this.activeBlockForm.value.commonEndDate,this.activeBlock.commonActStartDate=this.activeBlockForm.value.commonActStartDate,this.activeBlock.commonActEndDate=this.activeBlockForm.value.commonActEndDate,this.activeBlock.commonWorkRemarks=this.activeBlockForm.value.commonWorkRemarks;var r=this.activeBlock;if("active"!==r.formStatus||this.isFormOneGenerated){if("true"===this.isFormOneGenerated){r.hasOwnProperty("primaryIdGenerated")&&r.primaryIdGenerated||"active"!==r.formStatus||r.id&&delete r.id,"true"!==this.isFormOneGenerated||!r.photoDocList||r.hasOwnProperty("primaryIdGenerated")&&r.primaryIdGenerated||(r.photoDocList[0].id=null);var t={formOneStatus:this.formOneDetails.formOneStatus,formOneAList:[r],formType:this.formOneDetails.formType,formOneId:this.formOneDetails.formOneId,projectId:this.formOneDetails.projectId,processId:null,processName:"QTR_PROCESS",processType:"QTR_PROCESS",architectId:null,architectName:null,firmName:null,projectName:this.formOneDetails.projectName,projectEndDate:this.formOneDetails.projectEndDate,projectStartDate:this.formOneDetails.projectStartDate};this.apiService.modifyDraftFormOne(t).subscribe((function(r){if("200"==r.status){if(sessionStorage.setItem("formOneId",r.data.formOneId),sessionStorage.setItem("formOneCFilled",""),r.data.formOneAList&&r.data.formOneAList.length){var t=r.data.formOneAList.filter((function(r){return r.blockName===e.activeBlock.blockName}));e.activeBlock.photoDocList&&e.activeBlock.photoDocList.length&&(t.photoDocList=e.activeBlock.photoDocList),e.apiService.projectDetail(e.projectDetails),t[0].primaryIdGenerated=!0,e.apiService.changeData(t[0]),e.formOneDetails.formOneId=r.data.formOneId,e.apiService.updateData(e.formOneDetails),e.getUpdatedFormOneData(),e.disableButton=!1,e.loadingSpinner=!1,sessionStorage.setItem("isFormOneGenerated","true"),e.router.navigate(["qprDetails/internal-work"])}}else e.loadingSpinner=!1,e.disableButton=!1}),(function(r){e.loadingSpinner=!1,e.disableButton=!1,e.inputJson.next({popShow:!0,popMsg:"Failed to Save the data",popClass:"alert alert-danger",popRoute:""})}))}}else{r.id&&delete r.id,r.photoDocList&&delete r.photoDocList;var o={formOneStatus:this.formOneDetails.formOneStatus,formOneAList:[r],formType:this.formOneDetails.formType,projectId:this.formOneDetails.projectId,processId:null,processName:"QTR_PROCESS",processType:"QTR_PROCESS",architectId:null,architectName:null,firmName:null,projectName:this.formOneDetails.projectName,projectEndDate:this.formOneDetails.projectEndDate,projectStartDate:this.formOneDetails.projectStartDate};this.apiService.saveDraftFormOne(o,this.qtrId).subscribe((function(r){if("200"==r.status){if(sessionStorage.setItem("formOneId",r.data.formOneId),sessionStorage.setItem("formOneCFilled",""),r.data.formOneAList&&r.data.formOneAList.length){var t=r.data.formOneAList.filter((function(r){return r.blockName===e.activeBlock.blockName}));e.activeBlock.photoDocList&&e.activeBlock.photoDocList.length&&(t.photoDocList=e.activeBlock.photoDocList),e.apiService.projectDetail(e.projectDetails),t[0].primaryIdGenerated=!0,e.formOneDetails.formOneId=r.data.formOneId,e.apiService.updateData(e.formOneDetails),e.apiService.changeData(t[0]),e.getUpdatedFormOneData(),e.disableButton=!1,e.loadingSpinner=!1,sessionStorage.setItem("isFormOneGenerated","true"),e.router.navigate(["qprDetails/internal-work"])}}else e.loadingSpinner=!1,e.disableButton=!1}),(function(r){e.loadingSpinner=!1,e.disableButton=!1,e.inputJson.next({popShow:!0,popMsg:"Failed to Save the data",popClass:"alert alert-danger",popRoute:""})}))}}else this.disableButton=!1,this.loadingSpinner=!1}},{key:"isFieldInvalid",value:function(e){return!this.activeBlockForm.get(e).valid&&this.isSubmitted}},{key:"getUpdatedFormOneData",value:function(){var e=this;this.apiService.getOldFormOneDetailsByQtr(this.qtrId).subscribe((function(r){if(200==r.status&&(e.oldFormDetails=r.data,e.oldFormDetails&&e.oldFormDetails.returnFileList&&e.oldFormDetails.returnFileList.length)){var t=e.oldFormDetails.returnFileList.length;t-=1;var o=e.oldFormDetails.returnFileList[t];sessionStorage.setItem("qtrReturnId",o.returnId)}}))}},{key:"noOfFloors",get:function(){return this.activeBlockForm.get("noOfFloors")}},{key:"noOfLifts",get:function(){return this.activeBlockForm.get("noOfLifts")}},{key:"isFormInvalid",value:function(){return!this.activeBlockForm.invalid||(console.log(this.activeBlockForm),!1)}},{key:"back",value:function(){var e=sessionStorage.getItem("blockIndex"),r=e?Number(e):null;"active"==this.activeBlock.formStatus&&(this.activeBlock.primaryIdGenerated?this.activeBlock.formStatus="filled":this.activeBlock.formStatus="inActive"),this.formOneDetails.formOneAList[r]=this.activeBlock,this.apiService.updateData(this.formOneDetails),this.activeBlock=this.formOneDetails.formOneAList[r-1],this.activeBlock.formStatus="active";var t=(r-=1).toString();sessionStorage.setItem("blockIndex",t),this.apiService.changeData(this.activeBlock),this._location.back()}},{key:"showBackButton",value:function(){var e=sessionStorage.getItem("blockIndex");return 0!=(e?Number(e):null)}}]),e}();g.ctorParameters=function(){return[{type:d.e},{type:a.h},{type:v.a},{type:h}]},g=o.b([Object(n.n)({selector:"app-form1",template:o.c(t("6HXh")).default,styles:[o.c(t("h5AC")).default]})],g);var k=function(){function e(r,t,o,n){_classCallCheck(this,e),this.router=r,this.apiService=t,this._location=o,this._validation=n,this.formOneDetails={},this.inputJson=new c.a({}),this.disableButton=!1,this.isSubmitted=!1,this.loadingSpinner=!1,this.disableField=!0}return _createClass(e,[{key:"ngOnInit",value:function(){var e=this;this.internalWorkForm=new f.d({excavationWrokDone:new f.c("",[f.h.required,f.h.min(0),f.h.max(100)]),plinthWorkDone:new f.c("",[f.h.required,f.h.min(0),f.h.max(100)]),slabsWorkDone:new f.c("",[f.h.required,f.h.min(0),f.h.max(100)]),internalDetailsWrkDone:new f.c(""),staircases:new f.c("",[f.h.required,f.h.min(0),f.h.max(100)]),stiltFloorWorkDone:new f.c("",[f.h.required,f.h.min(0),f.h.max(100)]),sanitaryFittings:new f.c("",[f.h.required,f.h.min(0),f.h.max(100)]),installationOfAll:new f.c("",[f.h.required,f.h.min(0),f.h.max(100)]),externalDetail:new f.c(""),noOfCmpltdWorkRccSlabs:new f.c("",[f.h.required,f.h.min(0),f.h.max(1e3)]),noOfCmpltdWorkInternal:new f.c("",[f.h.required,f.h.min(0),f.h.max(1e3)]),noOfCmpltdWorkStairCases:new f.c("",[f.h.required,f.h.min(0),f.h.max(1e3)]),noOfCmpltdWorkStiltFlooring:new f.c("",[f.h.required,f.h.min(0),f.h.max(1e3)]),noOfCmpltdWorkSanitaryFittings:new f.c("",[f.h.required,f.h.min(0),f.h.max(1e3)]),noOfCmpltdWorkInstallation:new f.c("",[f.h.required]),noOfCmpltdWorkExternal:new f.c("")}),this.formOneId=sessionStorage.getItem("formOneId"),this.apiService.currentData.subscribe((function(r){e.activeBlock=r,e.setMaxValidator(e.activeBlock.noOfFloors),e.setMaxValidatorForFloors(e.activeBlock.totalNoOfSlabs),e.autoFetchData()})),this.apiService.details.subscribe((function(r){e.projectDetails=r})),this.apiService.blocks.subscribe((function(r){e.formOneDetails=r})),setTimeout((function(){e.scrollToCenter()}),100)}},{key:"excavationWrokDone",get:function(){return this.internalWorkForm.get("excavationWrokDone")}},{key:"plinthWorkDone",get:function(){return this.internalWorkForm.get("plinthWorkDone")}},{key:"slabsWorkDone",get:function(){return this.internalWorkForm.get("slabsWorkDone")}},{key:"internalDetailsWrkDone",get:function(){return this.internalWorkForm.get("internalDetailsWrkDone")}},{key:"staircases",get:function(){return this.internalWorkForm.get("staircases")}},{key:"noOfCmpltdWorkStiltFlooring",get:function(){return this.internalWorkForm.get("noOfCmpltdWorkStiltFlooring")}},{key:"noOfCmpltdWorkSanitaryFittings",get:function(){return this.internalWorkForm.get("noOfCmpltdWorkSanitaryFittings")}},{key:"noOfCmpltdWorkInstallation",get:function(){return this.internalWorkForm.get("noOfCmpltdWorkInstallation")}},{key:"autoFetchData",value:function(){this.internalWorkForm.patchValue({blockId:this.activeBlock.blockId,excavationWrokDone:this.activeBlock.excavationWrokDone,plinthWorkDone:this.activeBlock.plinthWorkDone,slabsWorkDone:this.activeBlock.slabsWorkDone,internalDetailsWrkDone:this.activeBlock.internalDetailsWrkDone,staircases:this.activeBlock.staircases,stiltFloorWorkDone:this.activeBlock.stiltFloorWorkDone,sanitaryFittings:this.activeBlock.sanitaryFittings,installationOfAll:this.activeBlock.installationOfAll,externalDetail:this.activeBlock.externalDetail,noOfCmpltdWorkRccSlabs:this.activeBlock.noOfCmpltdWorkRccSlabs,noOfCmpltdWorkInternal:this.activeBlock.noOfCmpltdWorkInternal,noOfCmpltdWorkStairCases:this.activeBlock.noOfCmpltdWorkStairCases,noOfCmpltdWorkStiltFlooring:this.activeBlock.noOfCmpltdWorkStiltFlooring,noOfCmpltdWorkSanitaryFittings:this.activeBlock.noOfCmpltdWorkSanitaryFittings,noOfCmpltdWorkInstallation:this.activeBlock.noOfCmpltdWorkInstallation,noOfCmpltdWorkExternal:this.activeBlock.noOfCmpltdWorkExternal}),this.internalWorkForm.controls.noOfCmpltdWorkRccSlabs&&this.internalWorkForm.controls.noOfCmpltdWorkRccSlabs.value&&this.changeData(this.internalWorkForm.controls.noOfCmpltdWorkRccSlabs.value,"slabsWorkDone"),this.internalWorkForm.controls.noOfCmpltdWorkInternal&&this.internalWorkForm.controls.noOfCmpltdWorkInternal.value&&this.changeData(this.internalWorkForm.controls.noOfCmpltdWorkInternal.value,"internalDetailsWrkDone"),this.internalWorkForm.controls.noOfCmpltdWorkStairCases&&this.internalWorkForm.controls.noOfCmpltdWorkStairCases.value&&this.changeData(this.internalWorkForm.controls.noOfCmpltdWorkStairCases.value,"staircases"),this.internalWorkForm.controls.noOfCmpltdWorkStiltFlooring&&this.internalWorkForm.controls.noOfCmpltdWorkStiltFlooring.value&&this.changeData(this.internalWorkForm.controls.noOfCmpltdWorkStiltFlooring.value,"stiltFloorWorkDone"),this.internalWorkForm.controls.noOfCmpltdWorkSanitaryFittings&&this.internalWorkForm.controls.noOfCmpltdWorkSanitaryFittings.value&&this.changeData(this.internalWorkForm.controls.noOfCmpltdWorkSanitaryFittings.value,"sanitaryFittings"),this.internalWorkForm.controls.noOfCmpltdWorkInstallation&&this.internalWorkForm.controls.noOfCmpltdWorkInstallation.value&&this.changeData(this.internalWorkForm.controls.noOfCmpltdWorkInstallation.value,"installationOfAll")}},{key:"noOfCmpltdWorkRccSlabs",get:function(){return this.internalWorkForm.get("noOfCmpltdWorkRccSlabs")}},{key:"noOfCmpltdWorkInternal",get:function(){return this.internalWorkForm.get("noOfCmpltdWorkInternal")}},{key:"noOfCmpltdWorkStairCases",get:function(){return this.internalWorkForm.get("noOfCmpltdWorkStairCases")}},{key:"stiltFloorWorkDone",get:function(){return this.internalWorkForm.get("stiltFloorWorkDone")}},{key:"sanitaryFittings",get:function(){return this.internalWorkForm.get("sanitaryFittings")}},{key:"installationOfAll",get:function(){return this.internalWorkForm.get("installationOfAll")}},{key:"setMaxValidator",value:function(e){var r=this.internalWorkForm.get("noOfCmpltdWorkInternal");r.setValidators([f.h.required,f.h.min(0),f.h.max(e)]),r.updateValueAndValidity()}},{key:"setMaxValidatorForFloors",value:function(e){var r=this.internalWorkForm.get("noOfCmpltdWorkRccSlabs");r.setValidators([f.h.required,f.h.min(0),f.h.max(e)]),r.updateValueAndValidity()}},{key:"scrollToCenter",value:function(){this.myDiv&&this.myDiv.nativeElement&&this.myDiv.nativeElement.scrollIntoView({behavior:"smooth",block:"center",inline:"center"})}},{key:"next",value:function(){var e=this;if(this.isSubmitted=!0,this.isFormInvalid()){this.disableButton=!0,this.loadingSpinner=!0,this.activeBlock.excavationWrokDone=this.internalWorkForm.value.excavationWrokDone,this.activeBlock.plinthWorkDone=this.internalWorkForm.value.plinthWorkDone,this.activeBlock.slabsWorkDone=this.internalWorkForm.value.slabsWorkDone,this.activeBlock.internalDetailsWrkDone=this.internalWorkForm.value.internalDetailsWrkDone,this.activeBlock.staircases=this.internalWorkForm.value.staircases,this.activeBlock.stiltFloorWorkDone=this.internalWorkForm.value.stiltFloorWorkDone,this.activeBlock.sanitaryFittings=this.internalWorkForm.value.sanitaryFittings,this.activeBlock.installationOfAll=this.internalWorkForm.value.installationOfAll,this.activeBlock.externalDetail=this.internalWorkForm.value.externalDetail,this.activeBlock.noOfCmpltdWorkRccSlabs=this.internalWorkForm.value.noOfCmpltdWorkRccSlabs,this.activeBlock.noOfCmpltdWorkInternal=this.internalWorkForm.value.noOfCmpltdWorkInternal,this.activeBlock.noOfCmpltdWorkStairCases=this.internalWorkForm.value.noOfCmpltdWorkStairCases,this.activeBlock.noOfCmpltdWorkStiltFlooring=this.internalWorkForm.value.noOfCmpltdWorkStiltFlooring,this.activeBlock.noOfCmpltdWorkSanitaryFittings=this.internalWorkForm.value.noOfCmpltdWorkSanitaryFittings,this.activeBlock.noOfCmpltdWorkInstallation=this.internalWorkForm.value.noOfCmpltdWorkInstallation,this.activeBlock.noOfCmpltdWorkExternal=this.internalWorkForm.value.noOfCmpltdWorkExternal;var r=this.activeBlock,t={formOneId:this.stringToNumber(this.formOneId),formOneAList:[r],projectId:this.formOneDetails.projectId,projectName:this.formOneDetails.projectName};this.apiService.modifyDraftFormOne(t).subscribe((function(r){if(e.disableButton=!1,e.loadingSpinner=!1,"200"==r.status&&r.data.formOneAList&&r.data.formOneAList.length){var t=r.data.formOneAList.filter((function(r){return r.blockName===e.activeBlock.blockName}));e.apiService.changeData(t[0]),e.router.navigate(["qprDetails/external-work"])}}),(function(r){e.disableButton=!1,e.loadingSpinner=!1,e.inputJson.next({popShow:!0,popMsg:"Failed to Save the data",popClass:"alert alert-danger",popRoute:""})}))}else this.loadingSpinner=!1,this.disableButton=!1}},{key:"isFieldInvalid",value:function(e){return!this.internalWorkForm.get(e).valid&&this.isSubmitted}},{key:"stringToNumber",value:function(e){return null==e?0:e?("number"!=typeof e&&(e=parseInt(e)),e):0}},{key:"changeData",value:function(e,r){if(0==e)this.internalWorkForm.patchValue(_defineProperty({},r,0));else if("slabsWorkDone"==r){var t=100*e/(Number(this.activeBlock.totalNoOfSlabs)-Number(this.activeBlock.totalNoOfPlinth));t=this.roundUpValues(t),this.internalWorkForm.patchValue(_defineProperty({},r,t))}else if("internalDetailsWrkDone"==r){var o=100*e/Number(this.activeBlock.noOfFloors);o=this.roundUpValues(o),this.internalWorkForm.patchValue(_defineProperty({},r,o||0))}else if("staircases"==r){var n=100*e/Number(this.activeBlock.noOfFloors);n=this.roundUpValues(n),this.internalWorkForm.patchValue(_defineProperty({},r,n||""))}else if("stiltFloorWorkDone"==r){var a=100*e/Number(this.projectDetails.noOfInventory);a=this.roundUpValues(a),this.internalWorkForm.patchValue(_defineProperty({},r,a||""))}else if("sanitaryFittings"==r){var i=100*e/Number(this.projectDetails.noOfInventory);i=this.roundUpValues(i),this.internalWorkForm.patchValue(_defineProperty({},r,i||""))}else if("installationOfAll"==r){var l=100*e/Number(this.projectDetails.noOfInventory);l=this.roundUpValues(l),this.internalWorkForm.patchValue(_defineProperty({},r,l||""))}}},{key:"roundUpValues",value:function(e){var r=e.toString();return r.includes(".")&&r.split(".")[1].length>2&&(e=parseFloat(e.toFixed(2))),e}},{key:"isFormInvalid",value:function(){return!this.internalWorkForm.invalid}},{key:"back",value:function(){this._location.back()}}]),e}();k.ctorParameters=function(){return[{type:d.e},{type:h},{type:a.h},{type:v.a}]},o.b([Object(n.kb)("myDiv",{static:!1})],k.prototype,"myDiv",void 0),k=o.b([Object(n.n)({selector:"app-internal-work",template:o.c(t("e1wW")).default,styles:[o.c(t("2BBi")).default]})],k);var D=function(){function e(r,t,o){_classCallCheck(this,e),this.router=r,this.apiService=t,this._location=o,this.disableButton=!0,this.formOneDocDetails={photoExternalUId:"",photoFlooringUId:"",photoWallsUId:"",photoTerraceUId:"",photoCommonUId:"",photoApprovalsUId:""},this.photoExternalFUId=new c.a({}),this.photoFlooringFUId=new c.a({}),this.photoWallsFUId=new c.a({}),this.photoTerraceFUId=new c.a({}),this.photoCommonFUId=new c.a({}),this.photoApprovalsFUId=new c.a({}),this.formOneDetails={},this.inputJson=new c.a({}),this.disableFields={},this.buttonText="Save & Next Block",this.loadingSpinner=!1,this.isSubmitted=!1,this.allPhotosUploaded=!1,this.getCorrectDocument=function(e){var r=sessionStorage.getItem("submittedQeCodes")?JSON.parse(sessionStorage.getItem("submittedQeCodes")):[];return r.length>0&&!!e.split(",").filter((function(e){return r.includes(e)})).length}}return _createClass(e,[{key:"ngOnInit",value:function(){var e=this;this.externalWorkForm=new f.d({plumbingProposedFlag:new f.c(!1,[f.h.required]),plumbingWorkDone:new f.c("",[f.h.required,f.h.min(0),f.h.max(100)]),plumbingWorkRemarks:new f.c(""),plasterProposedFlag:new f.c(!1,[f.h.required]),plasterWorkDone:new f.c("",[f.h.required,f.h.min(0),f.h.max(100)]),plasterWorkRemarks:new f.c(""),terraceProposedFlag:new f.c(!1,[f.h.required]),terraceWorkDone:new f.c("",[f.h.required,f.h.min(0),f.h.max(100)]),terraceWorkRemarks:new f.c(""),liftsProposedFlag:new f.c(!1,[f.h.required]),liftsWorkDone:new f.c("",[f.h.required,f.h.min(0),f.h.max(100)]),liftsWorkRemarks:new f.c("")}),this.photoRemarksForm=new f.d({photoExternalRemarks:new f.c(""),photoFlooringRemarks:new f.c(""),photoWallsRemarks:new f.c(""),photoTerraceRemarks:new f.c(""),photoCommonRemarks:new f.c(""),photoApprovalsRemarks:new f.c("")}),this.outputValue={},this.formOneId=sessionStorage.getItem("formOneId"),this.photoObject={id:null,formOneAFk:null,docid:"",photoName:"",fhotoUId:"",latitude:"",longitude:"",photoExternalId:null,photoExternalUId:null,photoFlooringId:null,photoFlooringUId:null,photoWallsId:null,photoWallsUId:null,photoTerraceId:null,photoTerraceUId:null,photoCommonId:null,photoCommonUId:null,photoApprovalsId:null,photoApprovalsUId:null},this.apiService.currentData.subscribe((function(r){e.activeBlock=r,e.autoFetchData()})),this.apiService.details.subscribe((function(r){e.projectDetails=r})),this.apiService.blocks.subscribe((function(r){e.formOneDetails=r})),this.currentBlockIndex=sessionStorage.getItem("blockIndex"),(this.currentBlockIndex?Number(this.currentBlockIndex):null)==this.projectDetails.noOfBlocks-1&&(this.buttonText="Save & Next"),setTimeout((function(){e.scrollToCenter()}),100)}},{key:"plumbingWorkDone",get:function(){return this.externalWorkForm.get("plumbingWorkDone")}},{key:"plasterWorkDone",get:function(){return this.externalWorkForm.get("plasterWorkDone")}},{key:"terraceWorkDone",get:function(){return this.externalWorkForm.get("terraceWorkDone")}},{key:"liftsWorkDone",get:function(){return this.externalWorkForm.get("liftsWorkDone")}},{key:"autoFetchData",value:function(){if(this.externalWorkForm.patchValue({blockId:this.activeBlock.blockId,plumbingProposedFlag:this.activeBlock.plumbingProposedFlag||null==this.activeBlock.plumbingProposedFlag?"true":"false",plumbingWorkDone:this.activeBlock.plumbingWorkDone,plumbingWorkRemarks:this.activeBlock.plumbingWorkRemarks,plasterProposedFlag:this.activeBlock.plasterProposedFlag||null==this.activeBlock.plasterProposedFlag?"true":"false",plasterWorkDone:this.activeBlock.plasterWorkDone,plasterWorkRemarks:this.activeBlock.plasterWorkRemarks,terraceProposedFlag:this.activeBlock.terraceProposedFlag||null==this.activeBlock.terraceProposedFlag?"true":"false",terraceWorkDone:this.activeBlock.terraceWorkDone,terraceWorkRemarks:this.activeBlock.terraceWorkRemarks,liftsProposedFlag:this.activeBlock.liftsProposedFlag||null==this.activeBlock.liftsProposedFlag?"true":"false",liftsWorkDone:this.activeBlock.liftsWorkDone,liftsWorkRemarks:this.activeBlock.liftsWorkRemarks}),this.activeBlock.photoDocList&&this.activeBlock.photoDocList.length){var e=this.activeBlock.photoDocList[0];this.photoRemarksForm.patchValue({photoExternalRemarks:e.photoExternalRemarks,photoFlooringRemarks:e.photoFlooringRemarks,photoWallsRemarks:e.photoWallsRemarks,photoTerraceRemarks:e.photoTerraceRemarks,photoCommonRemarks:e.photoCommonRemarks,photoApprovalsRemarks:e.photoApprovalsRemarks}),this.formOneDocDetails.photoExternalUId=this.activeBlock.photoDocList[0].photoExternalUId,this.formOneDocDetails.photoFlooringUId=this.activeBlock.photoDocList[0].photoFlooringUId,this.formOneDocDetails.photoWallsUId=this.activeBlock.photoDocList[0].photoWallsUId,this.formOneDocDetails.photoTerraceUId=this.activeBlock.photoDocList[0].photoTerraceUId,this.formOneDocDetails.photoCommonUId=this.activeBlock.photoDocList[0].photoCommonUId,this.formOneDocDetails.photoApprovalsUId=this.activeBlock.photoDocList[0].photoApprovalsUId,(this.formOneDocDetails.photoExternalUId||this.formOneDocDetails.photoFlooringUId||this.formOneDocDetails.photoWallsUId||this.formOneDocDetails.photoTerraceUId||this.formOneDocDetails.photoCommonUId||this.formOneDocDetails.photoApprovalsUId)&&(this.photoObject.photoExternalUId=this.formOneDocDetails.photoExternalUId,this.photoObject.photoExternalId=this.activeBlock.photoDocList[0].photoExternalId,this.photoObject.photoFlooringUId=this.formOneDocDetails.photoFlooringUId,this.photoObject.photoFlooringId=this.activeBlock.photoDocList[0].photoFlooringId,this.photoObject.photoWallsUId=this.formOneDocDetails.photoWallsUId,this.photoObject.photoWallsId=this.activeBlock.photoDocList[0].photoWallsId,this.photoObject.photoTerraceUId=this.formOneDocDetails.photoTerraceUId,this.photoObject.photoTerraceId=this.activeBlock.photoDocList[0].photoTerraceId,this.photoObject.photoCommonUId=this.formOneDocDetails.photoCommonUId,this.photoObject.photoCommonId=this.activeBlock.photoDocList[0].photoCommonId,this.photoObject.photoApprovalsUId=this.formOneDocDetails.photoApprovalsUId,this.photoObject.photoApprovalsId=this.activeBlock.photoDocList[0].photoApprovalsId,this.photoObject.id=this.activeBlock.photoDocList[0].id,this.disableButton=!1,this.allPhotosUploaded=!0)}}},{key:"scrollToCenter",value:function(){this.myDiv&&this.myDiv.nativeElement&&this.myDiv.nativeElement.scrollIntoView({behavior:"smooth",block:"center",inline:"center"})}},{key:"onRadioChange",value:function(e,r){"false"==e.target.value?1==r?(this.disableFields.disablePlumbingWorkdone=!0,this.externalWorkForm.patchValue({plumbingWorkDone:"0"})):2==r?(this.disableFields.disablePlasterWorkdone=!0,this.externalWorkForm.patchValue({plasterWorkDone:"0"})):3==r?(this.disableFields.disableTerraceWorkdone=!0,this.externalWorkForm.patchValue({terraceWorkDone:"0"})):4==r&&(this.disableFields.disableLiftsWorkdone=!0,this.externalWorkForm.patchValue({liftsWorkDone:"0"})):1==r?(this.disableFields.disablePlumbingWorkdone=!1,this.externalWorkForm.patchValue({plumbingWorkDone:""})):2==r?(this.disableFields.disablePlasterWorkdone=!1,this.externalWorkForm.patchValue({plasterWorkDone:""})):3==r?(this.disableFields.disableTerraceWorkdone=!1,this.externalWorkForm.patchValue({terraceWorkDone:""})):4==r&&(this.disableFields.disableLiftsWorkdone=!1,this.externalWorkForm.patchValue({liftsWorkDone:""}))}},{key:"setValue",value:function(e){this.disableButton=!0,this.allPhotosUploaded=!1,this.outputValue[e.fid]=e.docid,"photoExternalId"==e.fid?(this.photoObject.photoExternalId=e.docid,this.formOneDocDetails.photoExternalUId="",this.photoObject.photoExternalUId=""):"photoFlooringId"==e.fid?(this.photoObject.photoFlooringId=e.docid,this.formOneDocDetails.photoFlooringUId="",this.photoObject.photoFlooringUId=""):"photoApprovalsId"==e.fid?(this.photoObject.photoApprovalsId=e.docid,this.formOneDocDetails.photoApprovalsUId="",this.photoObject.photoApprovalsUId=""):"photoWallsId"==e.fid?(this.photoObject.photoWallsId=e.docid,this.formOneDocDetails.photoWallsUId="",this.photoObject.photoWallsUId=""):"photoTerraceId"==e.fid?(this.photoObject.photoTerraceId=e.docid,this.formOneDocDetails.photoTerraceUId="",this.photoObject.photoTerraceUId=""):"photoCommonId"==e.fid&&(this.photoObject.photoCommonId=e.docid,this.formOneDocDetails.photoCommonUId="",this.photoObject.photoCommonUId=""),this.photoObject.photoExternalId&&this.photoObject.photoFlooringId&&this.photoObject.photoApprovalsId&&this.photoObject.photoWallsId&&this.photoObject.photoTerraceId&&this.photoObject.photoCommonId&&(this.disableButton=!1,this.allPhotosUploaded=!0)}},{key:"nextBlock",value:function(){var e=this;if(this.isSubmitted=!0,this.isFormInvalid()){this.loadingSpinner=!0,this.disableButton=!0,this.activeBlock.plumbingProposedFlag="true"==this.externalWorkForm.value.plumbingProposedFlag,this.activeBlock.plumbingWorkDone=this.externalWorkForm.value.plumbingWorkDone,this.activeBlock.plumbingWorkRemarks=this.externalWorkForm.value.plumbingWorkRemarks,this.activeBlock.plasterProposedFlag="true"==this.externalWorkForm.value.plasterProposedFlag,this.activeBlock.plasterWorkDone=this.externalWorkForm.value.plasterWorkDone,this.activeBlock.plasterWorkRemarks=this.externalWorkForm.value.plasterWorkRemarks,this.activeBlock.terraceProposedFlag="true"==this.externalWorkForm.value.terraceProposedFlag,this.activeBlock.terraceWorkDone=this.externalWorkForm.value.terraceWorkDone,this.activeBlock.terraceWorkRemarks=this.externalWorkForm.value.terraceWorkRemarks,this.activeBlock.liftsProposedFlag="true"==this.externalWorkForm.value.liftsProposedFlag,this.activeBlock.liftsWorkDone=this.externalWorkForm.value.liftsWorkDone,this.activeBlock.liftsWorkRemarks=this.externalWorkForm.value.liftsWorkRemarks,this.photoObject.formOneAFk=this.activeBlock.id,this.photoObject.photoApprovalsRemarks=this.photoRemarksForm.value.photoApprovalsRemarks,this.photoObject.photoCommonRemarks=this.photoRemarksForm.value.photoCommonRemarks,this.photoObject.photoTerraceRemarks=this.photoRemarksForm.value.photoTerraceRemarks,this.photoObject.photoWallsRemarks=this.photoRemarksForm.value.photoWallsRemarks,this.photoObject.photoFlooringRemarks=this.photoRemarksForm.value.photoFlooringRemarks,this.photoObject.photoExternalRemarks=this.photoRemarksForm.value.photoExternalRemarks,this.activeBlock.photoDocList=[this.photoObject];var r=this.activeBlock,t={formOneId:this.stringToNumber(this.formOneId),formOneAList:[r],projectId:this.formOneDetails.projectId,architectName:this.formOneDetails.architectName,projectName:this.formOneDetails.projectName};this.apiService.modifyDraftFormOne(t).subscribe((function(r){if(e.disableButton=!1,e.loadingSpinner=!1,"200"==r.status){var t=e.projectDetails.noOfBlocks;e.activeBlock.formStatus="filled",r.data&&r.data.formOneAList&&r.data.formOneAList.length&&r.data.formOneAList.forEach((function(r){r.photoDocList&&r.photoDocList.length&&r.blockName==e.activeBlock.blockName&&(e.activeBlock.photoDocList=r.photoDocList)}));var o=e.formOneDetails.formOneAList.findIndex((function(r){return r.blockName===e.activeBlock.blockName}));-1!==o&&(e.formOneDetails.formOneAList[o]=e.activeBlock,e.apiService.updateData(e.formOneDetails));var n=e.currentBlockIndex;if((n=n?Number(n):null)<t-1){e.activeBlock=e.formOneDetails.formOneAList[n+1],e.activeBlock.formStatus="active",e.apiService.changeData(e.activeBlock);var a=n+1;a=a.toString(),sessionStorage.setItem("blockIndex",a),sessionStorage.setItem("isFormOneGenerated","true"),e.router.navigate(["qprDetails/form1"])}else e.formOneDetails.formStatus="active",e.formOneDetails.allBlocksFilled="true",e.apiService.changeData(e.activeBlock),e.apiService.updateData(e.formOneDetails),e.router.navigate(["qprDetails/common-area"])}}),(function(r){e.disableButton=!1,e.loadingSpinner=!1,e.inputJson.next({popShow:!0,popMsg:"Failed to Save the data",popClass:"alert alert-danger",popRoute:""})}))}else this.disableButton=!1,this.loadingSpinner=!1}},{key:"isFormInvalid",value:function(){return!this.externalWorkForm.invalid}},{key:"isFieldInvalid",value:function(e){return!this.externalWorkForm.get(e).valid&&this.isSubmitted}},{key:"stringToNumber",value:function(e){return null==e?0:e?("number"!=typeof e&&(e=parseInt(e)),e):0}},{key:"back",value:function(){this._location.back()}}]),e}();D.ctorParameters=function(){return[{type:d.e},{type:h},{type:a.h}]},o.b([Object(n.kb)("myDiv",{static:!1})],D.prototype,"myDiv",void 0),D=o.b([Object(n.n)({selector:"app-external-work",template:o.c(t("XP3S")).default,styles:[o.c(t("rgta")).default]})],D);var b=function(){function e(r,t,o){_classCallCheck(this,e),this.router=r,this.apiService=t,this._location=o,this.blockDetails={},this.formOneDetails={},this.formOneB={},this.inputJson=new c.a({}),this.disableButton=!1,this.disableFields={},this.loadingSpinner=!1,this.isSubmitted=!1,this.FormOneBFilled=!1}return _createClass(e,[{key:"ngOnInit",value:function(){var e=this;this.commonAreaWorkForm=new f.d({streetLightingYesNo:new f.c("",[f.h.required]),streetLightingWorkDone:new f.c("",[f.h.required,f.h.min(0),f.h.max(100)]),streetLightingRemarks:new f.c(""),compoundWallYesNo:new f.c("",[f.h.required]),compoundWallWorkDone:new f.c("",[f.h.required,f.h.min(0),f.h.max(100)]),compoundWallRemarks:new f.c(""),plinthProtectionYesNo:new f.c("",[f.h.required]),plinthProtectionWorkDone:new f.c("",[f.h.required,f.h.min(0),f.h.max(100)]),plinthProtectionRemarks:new f.c(""),waterTankYesNo:new f.c("",[f.h.required]),waterTankWorkDone:new f.c("",[f.h.required,f.h.min(0),f.h.max(100)]),waterTankRemarks:new f.c(""),waterSupplyYesNo:new f.c("",[f.h.required]),waterSupplyWorkDone:new f.c("",[f.h.required,f.h.min(0),f.h.max(100)]),waterSupplyRemarks:new f.c(""),sewerageYesNo:new f.c("",[f.h.required]),sewerageWorkDone:new f.c("",[f.h.required,f.h.min(0),f.h.max(100)]),sewerageRemarks:new f.c(""),stormWaterDrainsYesNo:new f.c("",[f.h.required]),stormWaterDrainsWorkDone:new f.c("",[f.h.required,f.h.min(0),f.h.max(100)]),stormWaterDrainsRemarks:new f.c(""),internalRoadYesNo:new f.c("",[f.h.required]),internalRoadWorkDone:new f.c("",[f.h.required,f.h.min(0),f.h.max(100)]),internalRoadRemarks:new f.c(""),landscapingYesNo:new f.c("",[f.h.required]),landscapingWorkDone:new f.c("",[f.h.required,f.h.min(0),f.h.max(100)]),landscapingRemarks:new f.c(""),otherRequirementYesNo:new f.c("",[f.h.required]),otherRequirementWorkDone:new f.c("",[f.h.required,f.h.min(0),f.h.max(100)]),otherRequirementRemarks:new f.c("")}),this.formOneId=sessionStorage.getItem("formOneId"),this.apiService.details.subscribe((function(r){e.projectDetails=r})),this.apiService.blocks.subscribe((function(r){e.formOneDetails=r,e.formOneB=e.formOneDetails.formOneB,e.autoFetchData()})),this.getformOneDetailsById(),setTimeout((function(){e.scrollToCenter()}),100)}},{key:"getformOneDetailsById",value:function(){var e=this;this.apiService.getFormOneDetails(this.formOneId).subscribe((function(r){r&&null!=r.formOneB?e.formOneB.FormOneBFilled=!0:e.formOneB.FormOneBFilled=!1}))}},{key:"scrollToCenter",value:function(){this.myDiv&&this.myDiv.nativeElement&&this.myDiv.nativeElement.scrollIntoView({behavior:"smooth",block:"center",inline:"center"})}},{key:"autoFetchData",value:function(){this.commonAreaWorkForm.patchValue({streetLightingYesNo:this.formOneB.streetLightingYesNo?this.formOneB.streetLightingYesNo:"YES",streetLightingWorkDone:this.formOneB.streetLightingWorkDone,streetLightingRemarks:this.formOneB.streetLightingRemarks,compoundWallYesNo:this.formOneB.compoundWallYesNo?this.formOneB.compoundWallYesNo:"YES",compoundWallWorkDone:this.formOneB.compoundWallWorkDone,compoundWallRemarks:this.formOneB.compoundWallRemarks,plinthProtectionYesNo:this.formOneB.plinthProtectionYesNo?this.formOneB.plinthProtectionYesNo:"YES",plinthProtectionWorkDone:this.formOneB.plinthProtectionWorkDone,plinthProtectionRemarks:this.formOneB.plinthProtectionRemarks,waterTankYesNo:this.formOneB.waterTankYesNo?this.formOneB.waterTankYesNo:"YES",waterTankWorkDone:this.formOneB.waterTankWorkDone,waterTankRemarks:this.formOneB.waterTankRemarks,waterSupplyYesNo:this.formOneB.waterSupplyYesNo?this.formOneB.waterSupplyYesNo:"YES",waterSupplyWorkDone:this.formOneB.waterSupplyWorkDone,waterSupplyRemarks:this.formOneB.waterSupplyRemarks,sewerageYesNo:this.formOneB.sewerageYesNo?this.formOneB.sewerageYesNo:"YES",sewerageWorkDone:this.formOneB.sewerageWorkDone,sewerageRemarks:this.formOneB.sewerageRemarks,stormWaterDrainsYesNo:this.formOneB.stormWaterDrainsYesNo?this.formOneB.stormWaterDrainsYesNo:"YES",stormWaterDrainsWorkDone:this.formOneB.stormWaterDrainsWorkDone,stormWaterDrainsRemarks:this.formOneB.stormWaterDrainsRemarks,internalRoadYesNo:this.formOneB.internalRoadYesNo?this.formOneB.internalRoadYesNo:"YES",internalRoadWorkDone:this.formOneB.internalRoadWorkDone,internalRoadRemarks:this.formOneB.internalRoadRemarks,landscapingYesNo:this.formOneB.landscapingYesNo?this.formOneB.landscapingYesNo:"YES",landscapingWorkDone:this.formOneB.landscapingWorkDone,landscapingRemarks:this.formOneB.landscapingRemarks,otherRequirementYesNo:this.formOneB.otherRequirementYesNo?this.formOneB.otherRequirementYesNo:"YES",otherRequirementWorkDone:this.formOneB.otherRequirementWorkDone,otherRequirementRemarks:this.formOneB.otherRequirementRemarks}),"NO"==this.commonAreaWorkForm.value.streetLightingYesNo&&this.onRadioChange("NO",1),"NO"==this.commonAreaWorkForm.value.compoundWallYesNo&&this.onRadioChange("NO",2),"NO"==this.commonAreaWorkForm.value.plinthProtectionYesNo&&this.onRadioChange("NO",3),"NO"==this.commonAreaWorkForm.value.waterTankYesNo&&this.onRadioChange("NO",4),"NO"==this.commonAreaWorkForm.value.waterSupplyYesNo&&this.onRadioChange("NO",5),"NO"==this.commonAreaWorkForm.value.sewerageYesNo&&this.onRadioChange("NO",6),"NO"==this.commonAreaWorkForm.value.stormWaterDrainsYesNo&&this.onRadioChange("NO",7),"NO"==this.commonAreaWorkForm.value.internalRoadYesNo&&this.onRadioChange("NO",8),"NO"==this.commonAreaWorkForm.value.landscapingYesNo&&this.onRadioChange("NO",9),"NO"==this.commonAreaWorkForm.value.otherRequirementYesNo&&this.onRadioChange("NO",10)}},{key:"next",value:function(){var e=this;if(this.isSubmitted=!0,this.isFormInvalid()){this.disableButton=!0,this.loadingSpinner=!0,this.formOneB.streetLightingYesNo=this.commonAreaWorkForm.value.streetLightingYesNo,this.formOneB.streetLightingWorkDone=this.commonAreaWorkForm.value.streetLightingWorkDone,this.formOneB.streetLightingRemarks=this.commonAreaWorkForm.value.streetLightingRemarks,this.formOneB.compoundWallYesNo=this.commonAreaWorkForm.value.compoundWallYesNo,this.formOneB.compoundWallWorkDone=this.commonAreaWorkForm.value.compoundWallWorkDone,this.formOneB.compoundWallRemarks=this.commonAreaWorkForm.value.compoundWallRemarks,this.formOneB.plinthProtectionYesNo=this.commonAreaWorkForm.value.plinthProtectionYesNo,this.formOneB.plinthProtectionWorkDone=this.commonAreaWorkForm.value.plinthProtectionWorkDone,this.formOneB.plinthProtectionRemarks=this.commonAreaWorkForm.value.plinthProtectionRemarks,this.formOneB.waterTankYesNo=this.commonAreaWorkForm.value.waterTankYesNo,this.formOneB.waterTankWorkDone=this.commonAreaWorkForm.value.waterTankWorkDone,this.formOneB.waterTankRemarks=this.commonAreaWorkForm.value.waterTankRemarks,this.formOneB.waterSupplyYesNo=this.commonAreaWorkForm.value.waterSupplyYesNo,this.formOneB.waterSupplyWorkDone=this.commonAreaWorkForm.value.waterSupplyWorkDone,this.formOneB.waterSupplyRemarks=this.commonAreaWorkForm.value.waterSupplyRemarks,this.formOneB.sewerageYesNo=this.commonAreaWorkForm.value.sewerageYesNo,this.formOneB.sewerageWorkDone=this.commonAreaWorkForm.value.sewerageWorkDone,this.formOneB.sewerageRemarks=this.commonAreaWorkForm.value.sewerageRemarks,this.formOneB.stormWaterDrainsYesNo=this.commonAreaWorkForm.value.stormWaterDrainsYesNo,this.formOneB.stormWaterDrainsWorkDone=this.commonAreaWorkForm.value.stormWaterDrainsWorkDone,this.formOneB.stormWaterDrainsRemarks=this.commonAreaWorkForm.value.stormWaterDrainsRemarks,this.formOneB.internalRoadYesNo=this.commonAreaWorkForm.value.internalRoadYesNo,this.formOneB.internalRoadWorkDone=this.commonAreaWorkForm.value.internalRoadWorkDone,this.formOneB.internalRoadRemarks=this.commonAreaWorkForm.value.internalRoadRemarks,this.formOneB.landscapingYesNo=this.commonAreaWorkForm.value.landscapingYesNo,this.formOneB.landscapingWorkDone=this.commonAreaWorkForm.value.landscapingWorkDone,this.formOneB.landscapingRemarks=this.commonAreaWorkForm.value.landscapingRemarks,this.formOneB.otherRequirementYesNo=this.commonAreaWorkForm.value.otherRequirementYesNo,this.formOneB.otherRequirementWorkDone=this.commonAreaWorkForm.value.otherRequirementWorkDone,this.formOneB.otherRequirementRemarks=this.commonAreaWorkForm.value.otherRequirementRemarks;var r=this.formOneB;this.formOneB.FormOneBFilled||(this.formOneB.formBId=null);var t={formOneId:this.formOneId,formOneB:r,projectId:this.formOneDetails.projectId,architectName:this.formOneDetails.architectName,projectName:this.formOneDetails.projectName,processId:this.formOneDetails.processId};this.apiService.modifyDraftFormOne(t).subscribe((function(t){e.disableButton=!1,e.loadingSpinner=!1,"200"==t.status&&(e.formOneDetails.formOneB=t.data.formOneB?t.data.formOneB:r,e.formOneDetails.formOneB.FormOneBFilled=!0,e.formOneDetails.formStatus="filled",e.apiService.updateData(e.formOneDetails),e.router.navigate(["qprDetails/formonec"]))}),(function(r){e.disableButton=!1,e.loadingSpinner=!1,e.inputJson.next({popShow:!0,popMsg:"Failed to Save the data",popClass:"alert alert-danger",popRoute:""})}))}else this.disableButton=!1,this.loadingSpinner=!1}},{key:"isFieldInvalid",value:function(e){return!this.commonAreaWorkForm.get(e).valid&&this.isSubmitted}},{key:"onRadioChange",value:function(e,r){var t=e;console.log(e),"NO"==t?1==r?(this.disableFields.streetLightingYesNo=!0,this.commonAreaWorkForm.patchValue({streetLightingWorkDone:"0"})):2==r?(this.disableFields.compoundWallYesNo=!0,this.commonAreaWorkForm.patchValue({compoundWallWorkDone:"0"})):3==r?(this.disableFields.plinthProtectionYesNo=!0,this.commonAreaWorkForm.patchValue({plinthProtectionWorkDone:"0"})):4==r?(this.disableFields.waterTankYesNo=!0,this.commonAreaWorkForm.patchValue({waterTankWorkDone:"0"})):5==r?(this.disableFields.waterSupplyYesNo=!0,this.commonAreaWorkForm.patchValue({waterSupplyWorkDone:"0"})):6==r?(this.disableFields.sewerageYesNo=!0,this.commonAreaWorkForm.patchValue({sewerageWorkDone:"0"})):7==r?(this.disableFields.stormWaterDrainsYesNo=!0,this.commonAreaWorkForm.patchValue({stormWaterDrainsWorkDone:"0"})):8==r?(this.disableFields.internalRoadYesNo=!0,this.commonAreaWorkForm.patchValue({internalRoadWorkDone:"0"})):9==r?(this.disableFields.landscapingYesNo=!0,this.commonAreaWorkForm.patchValue({landscapingWorkDone:"0"})):10==r&&(this.disableFields.otherRequirementYesNo=!0,this.commonAreaWorkForm.patchValue({otherRequirementWorkDone:"0"})):1==r?(this.disableFields.streetLightingYesNo=!1,this.commonAreaWorkForm.patchValue({streetLightingWorkDone:""})):2==r?(this.disableFields.compoundWallYesNo=!1,this.commonAreaWorkForm.patchValue({compoundWallWorkDone:""})):3==r?(this.disableFields.plinthProtectionYesNo=!1,this.commonAreaWorkForm.patchValue({plinthProtectionWorkDone:""})):4==r?(this.disableFields.waterTankYesNo=!1,this.commonAreaWorkForm.patchValue({waterTankWorkDone:""})):5==r?(this.disableFields.waterSupplyYesNo=!1,this.commonAreaWorkForm.patchValue({waterSupplyWorkDone:""})):6==r?(this.disableFields.sewerageYesNo=!1,this.commonAreaWorkForm.patchValue({sewerageWorkDone:""})):7==r?(this.disableFields.stormWaterDrainsYesNo=!1,this.commonAreaWorkForm.patchValue({stormWaterDrainsWorkDone:""})):8==r?(this.disableFields.internalRoadYesNo=!1,this.commonAreaWorkForm.patchValue({internalRoadWorkDone:""})):9==r?(this.disableFields.landscapingYesNo=!1,this.commonAreaWorkForm.patchValue({landscapingWorkDone:""})):10==r&&(this.disableFields.otherRequirementYesNo=!1,this.commonAreaWorkForm.patchValue({otherRequirementWorkDone:""}))}},{key:"isFormInvalid",value:function(){return!this.commonAreaWorkForm.invalid}},{key:"back",value:function(){var e=this.formOneDetails.formOneAList.length;this.activeBlock=this.formOneDetails.formOneAList[e-1],this.formOneDetails.formStatus="inActive",this.activeBlock.formStatus="active";var r=e-1,t=r.toString();sessionStorage.setItem("blockIndex",t),this.formOneDetails.formOneAList[r]=this.activeBlock,this.apiService.changeData(this.activeBlock),this.apiService.updateData(this.formOneDetails),this._location.back()}},{key:"streetLightingWorkDone",get:function(){return this.commonAreaWorkForm.get("streetLightingWorkDone")}},{key:"compoundWallWorkDone",get:function(){return this.commonAreaWorkForm.get("compoundWallWorkDone")}},{key:"plinthProtectionWorkDone",get:function(){return this.commonAreaWorkForm.get("plinthProtectionWorkDone")}},{key:"waterTankWorkDone",get:function(){return this.commonAreaWorkForm.get("waterTankWorkDone")}},{key:"waterSupplyWorkDone",get:function(){return this.commonAreaWorkForm.get("waterSupplyWorkDone")}},{key:"sewerageWorkDone",get:function(){return this.commonAreaWorkForm.get("sewerageWorkDone")}},{key:"stormWaterDrainsWorkDone",get:function(){return this.commonAreaWorkForm.get("stormWaterDrainsWorkDone")}},{key:"internalRoadWorkDone",get:function(){return this.commonAreaWorkForm.get("internalRoadWorkDone")}},{key:"landscapingWorkDone",get:function(){return this.commonAreaWorkForm.get("landscapingWorkDone")}},{key:"otherRequirementWorkDone",get:function(){return this.commonAreaWorkForm.get("otherRequirementWorkDone")}}]),e}();b.ctorParameters=function(){return[{type:d.e},{type:h},{type:a.h}]},o.b([Object(n.kb)("myDiv",{static:!1})],b.prototype,"myDiv",void 0),b=o.b([Object(n.n)({selector:"app-common-area",template:o.c(t("LW2C")).default,styles:[o.c(t("U2NX")).default]})],b);var F=function(){function e(r,t,o,n){_classCallCheck(this,e),this.router=r,this.apiService=t,this._location=o,this._validation=n,this.formOneCDetails={},this.inputJson=new c.a({}),this.disableButton=!1,this.formOneCFilled=!1,this.isSubmitted=!1,this.loadingSpinner=!1}return _createClass(e,[{key:"ngOnInit",value:function(){var e=this;this.formOneCForm=new f.d({garageNo:new f.c("",[f.h.required,f.h.min(0),f.h.max(1e3)]),totalAreaGarage:new f.c("",[f.h.required]),garageProgressPer:new f.c("",[f.h.required,f.h.min(0),f.h.max(100)]),coveredParkingNo:new f.c("",[f.h.required,f.h.min(0),f.h.max(1e3)]),totalAreaCoveredParking:new f.c("",[f.h.required]),coveredProgressPer:new f.c("",[f.h.required,f.h.min(0),f.h.max(100)]),openParkingNo:new f.c("",[f.h.required,f.h.min(0),f.h.max(1e3)]),totalAreaOpenParking:new f.c("",[f.h.required]),openProgressPer:new f.c("",[f.h.required,f.h.min(0),f.h.max(100)])}),this.returnId=sessionStorage.getItem("qtrReturnId"),this.projectId=sessionStorage.getItem("projectId"),this.formOneId=sessionStorage.getItem("formOneId"),this.apiService.formOneC.subscribe((function(r){e.formOneCDetails=r,console.log(e.formOneCDetails)})),this.getFormOneCFilledDetails(),this.apiService.blocks.subscribe((function(r){e.blockDetails=r})),setTimeout((function(){e.scrollToCenter()}),100)}},{key:"scrollToCenter",value:function(){this.myDiv&&this.myDiv.nativeElement&&this.myDiv.nativeElement.scrollIntoView({behavior:"smooth",block:"center",inline:"center"})}},{key:"garageProgressPer",get:function(){return this.formOneCForm.get("garageProgressPer")}},{key:"coveredProgressPer",get:function(){return this.formOneCForm.get("coveredProgressPer")}},{key:"openProgressPer",get:function(){return this.formOneCForm.get("openProgressPer")}},{key:"getFormOneCFilledDetails",value:function(){var e=this;this.apiService.getFormOneCFilledDetails(this.formOneId).subscribe((function(r){e.formOneCDetails=r,e.formOneCDetails.data&&null!=e.formOneCDetails.data?(e.apiService.updateFormOneC(e.formOneCDetails.data),e.formOneCFilled=!0,e.formOneCForm.patchValue({garageNo:e.formOneCDetails.data.garageNo,totalAreaGarage:e.formOneCDetails.data.totalAreaGarage,garageProgressPer:e.formOneCDetails.data.garageProgressPer,coveredParkingNo:e.formOneCDetails.data.coveredParkingNo,totalAreaCoveredParking:e.formOneCDetails.data.totalAreaCoveredParking,coveredProgressPer:e.formOneCDetails.data.coveredProgressPer,openParkingNo:e.formOneCDetails.data.openParkingNo,totalAreaOpenParking:e.formOneCDetails.data.totalAreaOpenParking,openProgressPer:e.formOneCDetails.data.openProgressPer})):(e.formOneCFilled=!1,e.getFormOneCDetails())}))}},{key:"getFormOneCDetails",value:function(){var e=this;this.apiService.getFormOneCDetails(this.projectId,this.returnId).subscribe((function(r){e.formOneCDetails=r,e.apiService.updateFormOneC(e.formOneCDetails),e.formOneCForm.patchValue({garageNo:e.formOneCDetails.garageNo,totalAreaGarage:e.formOneCDetails.totalAreaGarage,garageProgressPer:e.formOneCDetails.garageProgressPer,coveredParkingNo:e.formOneCDetails.coveredParkingNo,totalAreaCoveredParking:e.formOneCDetails.totalAreaCoveredParking,coveredProgressPer:e.formOneCDetails.coveredProgressPer,openParkingNo:e.formOneCDetails.openParkingNo,totalAreaOpenParking:e.formOneCDetails.totalAreaOpenParking,openProgressPer:e.formOneCDetails.openProgressPer})}))}},{key:"next",value:function(){var e=this;this.isSubmitted=!0,this.isFormInvalid()?(this.disableButton=!0,this.loadingSpinner=!0,this.formOneCDetails.formoneId=this.formOneId,this.formOneCDetails.projectId=this.projectId,this.formOneCDetails.isActive=1,this.formOneCDetails.garageNo=this.formOneCForm.value.garageNo,this.formOneCDetails.totalAreaGarage=this.formOneCForm.value.totalAreaGarage,this.formOneCDetails.garageProgressPer=this.formOneCForm.value.garageProgressPer,this.formOneCDetails.coveredParkingNo=this.formOneCForm.value.coveredParkingNo,this.formOneCDetails.totalAreaCoveredParking=this.formOneCForm.value.totalAreaCoveredParking,this.formOneCDetails.coveredProgressPer=this.formOneCForm.value.coveredProgressPer,this.formOneCDetails.openParkingNo=this.formOneCForm.value.openParkingNo,this.formOneCDetails.totalAreaOpenParking=this.formOneCForm.value.totalAreaOpenParking,this.formOneCDetails.openProgressPer=this.formOneCForm.value.openProgressPer,this.formOneCFilled||(this.formOneCDetails.formOneCid=null),this.apiService.saveFormOneC(this.formOneCDetails).subscribe((function(r){e.disableButton=!1,e.loadingSpinner=!1,"200"==r.status&&(e.formOneCFilled=!0,e.apiService.updateFormOneC(r.data),e.router.navigate(["qprDetails/form3"]))}),(function(r){e.disableButton=!1,e.loadingSpinner=!1,e.inputJson.next({popShow:!0,popMsg:"Failed to Save the data",popClass:"alert alert-danger",popRoute:""})}))):(this.disableButton=!1,this.loadingSpinner=!1)}},{key:"isFieldInvalid",value:function(e){return!this.formOneCForm.get(e).valid&&this.isSubmitted}},{key:"isFormInvalid",value:function(){return!this.formOneCForm.invalid}},{key:"changeData",value:function(e,r,t){0==e&&this.formOneCForm.patchValue(_defineProperty(_defineProperty({},r,0),t,0))}},{key:"back",value:function(){this.blockDetails.formStatus="active",this.apiService.updateData(this.blockDetails),this._location.back()}}]),e}();F.ctorParameters=function(){return[{type:d.e},{type:h},{type:a.h},{type:v.a}]},o.b([Object(n.kb)("myDiv",{static:!1})],F.prototype,"myDiv",void 0),F=o.b([Object(n.n)({selector:"app-formonec",template:o.c(t("Yr+n")).default,styles:[o.c(t("7+B3")).default]})],F);var O=t("+CMT"),B=function(){function e(r,t,o,n,a,i,l){_classCallCheck(this,e),this.router=r,this._reraService=t,this._apiURL=o,this._httpService=n,this.apiService=a,this._location=i,this._validation=l,this.formThreeDetails={},this.inputJson=new c.a({}),this.disableButton=!1,this.formThreeModelMf={},this.tooltipJson=new c.a({}),this.loadingSpinner=!1,this.errorMsg=!1,this.successMsgTxt="",this.successMsg=!1,this.userFile=File,this.fileUploaded=!1,this.formThreeAList=null,this.formThreeAllData=null,this.isSubmitted=!1,this.isMofSubmitted=!1,this.step=1}return _createClass(e,[{key:"ngOnInit",value:function(){var e=this;this.formThreeForm=new f.d({subTotalofLandCostA:new f.c("",[f.h.required]),subTotalofLandCostB:new f.c("",[f.h.required]),subTotalofLandCostC:new f.c("",[f.h.required]),subTotofDevelopCostA:new f.c("",[f.h.required]),subTotofDevelopCostB:new f.c("",[f.h.required]),subTotofDevelopCostC:new f.c("",[f.h.required]),estimatedOtherCost:new f.c("",[f.h.required]),incurredOtherCostLastQpr:new f.c("",[f.h.required]),incurredOtherCostThisQpr:new f.c("",[f.h.required])}),this.mofForm=new f.d({ownedFund:new f.c("",[f.h.required]),estimatedOwnFundLastQpr:new f.c("",[f.h.required]),ownFundIncurred:new f.c("",[f.h.required]),borrowedSecuredFund:new f.c("",[f.h.required]),estimatedBorrowedSecuredFundLastQpr:new f.c("",[f.h.required]),borrowedSecuredFundIncurred:new f.c("",[f.h.required]),borrowedUnSecuredFund:new f.c("",[f.h.required]),estimatedBorrowedUnSecuredFundLastQpr:new f.c("",[f.h.required]),borrowedUnSecuredFundIncurred:new f.c("",[f.h.required]),customerReceipts:new f.c("",[f.h.required]),estimatedCustomerReceiptsLastQpr:new f.c("",[f.h.required]),customerReceiptsIncurred:new f.c("",[f.h.required])}),this.uploadFormThreeA=new f.d({excelfile:new f.c("",f.h.required)}),this.projectFormThreeId=sessionStorage.getItem("projectFormThreeId"),this.projectId=sessionStorage.getItem("projectId"),this.qtrId=sessionStorage.getItem("quaterId"),this.getQtrDetailsBasedonQuarter(),this.returnId=sessionStorage.getItem("qtrReturnId"),this.formThreeExlTemplate=this._reraService.httpStr+this._apiURL.formThreeApi+"exl/generateexlformthreeforqpr/"+this.projectId+"/QTR_PROCESS/"+this.returnId,this.apiService.details.subscribe((function(r){e.projectDetails=r})),this.apiService.formThree.subscribe((function(r){e.formThreeDetails=r})),setTimeout((function(){e.scrollToCenter()}),100)}},{key:"getQtrDetailsBasedonQuarter",value:function(){var e=this;this.apiService.getOldFormOneDetailsByQtr(this.qtrId).subscribe((function(r){if(200==r.status&&(e.dataBasedOnQtr=r.data,e.dataBasedOnQtr&&e.dataBasedOnQtr.returnFileList&&e.dataBasedOnQtr.returnFileList.length)){var t=e.dataBasedOnQtr.returnFileList.length;t-=1;var o=e.dataBasedOnQtr.returnFileList[t];o&&o.formThree&&o.formThree.formId&&(e.formThreeId=o.formThree.formId,sessionStorage.setItem("formThreeId",e.formThreeId),e.getFormThreeDetails())}}))}},{key:"scrollToCenter",value:function(){this.myDiv&&this.myDiv.nativeElement&&this.myDiv.nativeElement.scrollIntoView({behavior:"smooth",block:"center",inline:"center"})}},{key:"getFormThreeDetails",value:function(){var e=this;this.apiService.getFormThreeDetails(this.formThreeId).subscribe((function(r){e.formThreeDetails=r,e.formThreeAList=r.formThreeAList,e.formThreeASummayList=r.formThreeASummayList,r.formThreeAList&&r.formThreeAList.length&&(e.fileUploaded=!0),e.apiService.updateFormThree(e.formThreeDetails),e.formThreeDetails.formThreeBId&&null!=e.formThreeDetails.formThreeBId&&(e.formThreeBDetails=r.formThreeBId,e.formThreeForm.patchValue({subTotalofLandCostA:e.formThreeBDetails.subTotalofLandCostA,subTotalofLandCostB:e.formThreeBDetails.subTotalofLandCostB,subTotofDevelopCostA:e.formThreeBDetails.subTotofDevelopCostA,subTotofDevelopCostB:e.formThreeBDetails.subTotofDevelopCostB,estimatedOtherCost:e.formThreeBDetails.estimatedOtherCost,incurredOtherCostLastQpr:e.formThreeBDetails.incurredOtherCostLastQpr})),e.formThreeDetails.formThreeModelMf&&null!=e.formThreeDetails.formThreeModelMf&&(e.formThreeModelMf=e.formThreeDetails.formThreeModelMf,e.mofForm.patchValue({ownedFund:e.formThreeModelMf.ownedFund,estimatedOwnFundLastQpr:e.formThreeModelMf.estimatedOwnFundLastQpr,ownFundIncurred:e.formThreeModelMf.ownFundIncurred,borrowedSecuredFund:e.formThreeModelMf.borrowedSecuredFund,estimatedBorrowedSecuredFundLastQpr:e.formThreeModelMf.estimatedBorrowedSecuredFundLastQpr,borrowedSecuredFundIncurred:e.formThreeModelMf.borrowedSecuredFundIncurred,borrowedUnSecuredFund:e.formThreeModelMf.borrowedUnSecuredFund,estimatedBorrowedUnSecuredFundLastQpr:e.formThreeModelMf.estimatedBorrowedUnSecuredFundLastQpr,borrowedUnSecuredFundIncurred:e.formThreeModelMf.borrowedUnSecuredFundIncurred,customerReceipts:e.formThreeModelMf.customerReceipts,estimatedCustomerReceiptsLastQpr:e.formThreeModelMf.estimatedCustomerReceiptsLastQpr,customerReceiptsIncurred:e.formThreeModelMf.customerReceiptsIncurred})),null!=e.formThreeDetails.formThreeBId&&null!=e.formThreeDetails.formThreeModelMf||e.applicationFundDataAndMofFromProject()}))}},{key:"applicationFundDataAndMofFromProject",value:function(){var e=this;this.apiService.getFormThreeDetails(this.projectFormThreeId).subscribe((function(r){e.projectFormThreeDetails=r,null==e.formThreeDetails.formThreeBId&&e.projectFormThreeDetails.formThreeBId&&(e.formThreeBDetails=e.projectFormThreeDetails.formThreeBId,e.formThreeBDetails.id=null,e.formThreeForm.patchValue({subTotalofLandCostA:e.formThreeBDetails.subTotalofLandCostA,subTotalofLandCostB:e.formThreeBDetails.subTotalofLandCostB,subTotofDevelopCostA:e.formThreeBDetails.subTotofDevelopCostA,subTotofDevelopCostB:e.formThreeBDetails.subTotofDevelopCostB,estimatedOtherCost:e.formThreeBDetails.estimatedOtherCost,incurredOtherCostLastQpr:e.formThreeBDetails.incurredOtherCostLastQpr})),null==e.formThreeDetails.formThreeModelMf&&e.projectFormThreeDetails.formThreeModelMf&&(e.formThreeModelMf=e.projectFormThreeDetails.formThreeModelMf,e.formThreeModelMf.formThreemMfId=null,e.mofForm.patchValue({ownedFund:e.formThreeModelMf.ownedFund,estimatedOwnFundLastQpr:e.formThreeModelMf.estimatedOwnFundLastQpr,ownFundIncurred:e.formThreeModelMf.ownFundIncurred,borrowedSecuredFund:e.formThreeModelMf.borrowedSecuredFund,estimatedBorrowedSecuredFundLastQpr:e.formThreeModelMf.estimatedBorrowedSecuredFundLastQpr,borrowedSecuredFundIncurred:e.formThreeModelMf.borrowedSecuredFundIncurred,borrowedUnSecuredFund:e.formThreeModelMf.borrowedUnSecuredFund,estimatedBorrowedUnSecuredFundLastQpr:e.formThreeModelMf.estimatedBorrowedUnSecuredFundLastQpr,borrowedUnSecuredFundIncurred:e.formThreeModelMf.borrowedUnSecuredFundIncurred,customerReceipts:e.formThreeModelMf.customerReceipts,estimatedCustomerReceiptsLastQpr:e.formThreeModelMf.estimatedCustomerReceiptsLastQpr,customerReceiptsIncurred:e.formThreeModelMf.customerReceiptsIncurred}))}))}},{key:"saveApplicationFund",value:function(){var e=this;if(this.isSubmitted=!0,!this.formThreeForm.valid)return this.disableButton=!1,this.loadingSpinner=!1,!1;this.disableButton=!0,this.loadingSpinner=!0,this.formThreeBDetails.subTotalofLandCostA=this.formThreeForm.value.subTotalofLandCostA,this.formThreeBDetails.subTotalofLandCostB=this.formThreeForm.value.subTotalofLandCostC,this.formThreeBDetails.subTotofDevelopCostA=this.formThreeForm.value.subTotofDevelopCostA,this.formThreeBDetails.subTotofDevelopCostB=this.formThreeForm.value.subTotofDevelopCostC,this.formThreeBDetails.estimatedOtherCost=this.formThreeForm.value.estimatedOtherCost,this.formThreeBDetails.incurredOtherCostLastQpr=this.formThreeForm.value.incurredOtherCostLastQpr,this.formThreeBDetails.incurredOtherCostThisQpr=this.formThreeForm.value.incurredOtherCostThisQpr,this.formThreeDetails.formThreeId=this.formThreeId;var r={formThreeId:this.formThreeId,formThreeBId:this.formThreeBDetails,projectId:this.formThreeDetails.projectId};this.apiService.saveFormThree(r).subscribe((function(r){if(e.disableButton=!1,e.loadingSpinner=!1,"200"==r.status)if(e.formThreeDetails.formThreeBDetails=r.data.formThreeBId?r.data.formThreeBId:e.formThreeBDetails,e.formThreeBDetails=r.data.formThreeBId,e.apiService.updateFormThree(e.formThreeDetails),e.projectDetails&&e.projectDetails.totalProjectCost){e.projectDetails.totalProjectCost;e.stringToNumber(e.projectDetails.totalProjectCost)>25e7?(e.step=3,e.formThreeModelMf&&null!=e.formThreeModelMf||(e.formThreeModelMf={})):(e.step=3,e.formThreeModelMf={})}else e.step=3,e.formThreeModelMf={}}),(function(r){e.disableButton=!1,e.loadingSpinner=!1,e.inputJson.next({popShow:!0,popMsg:"Failed to Save the data",popClass:"alert alert-danger",popRoute:""})}))}},{key:"isFieldInvalid",value:function(e){return!this.formThreeForm.get(e).valid&&this.isSubmitted}},{key:"isMofFieldInvalid",value:function(e){return!this.mofForm.get(e).valid&&this.isMofSubmitted}},{key:"stringToNumber",value:function(e){return null==e?0:e?("number"!=typeof e&&(e=parseInt(e)),e):0}},{key:"submit",value:function(){var e=this;if(this.isMofSubmitted=!0,!this.mofForm.valid)return this.loadingSpinner=!1,this.disableButton=!1,!1;this.disableButton=!0,this.loadingSpinner=!0,this.formThreeModelMf.estimatedOwnFundLastQpr=this.mofForm.value.estimatedOwnFundLastQpr,this.formThreeModelMf.ownFundIncurred=this.mofForm.value.ownFundIncurred,this.formThreeModelMf.estimatedBorrowedSecuredFundLastQpr=this.mofForm.value.estimatedBorrowedSecuredFundLastQpr,this.formThreeModelMf.borrowedSecuredFundIncurred=this.mofForm.value.borrowedSecuredFundIncurred,this.formThreeModelMf.estimatedBorrowedUnSecuredFundLastQpr=this.mofForm.value.estimatedBorrowedUnSecuredFundLastQpr,this.formThreeModelMf.borrowedUnSecuredFundIncurred=this.mofForm.value.borrowedUnSecuredFundIncurred,this.formThreeModelMf.estimatedCustomerReceiptsLastQpr=this.mofForm.value.estimatedCustomerReceiptsLastQpr,this.formThreeModelMf.customerReceiptsIncurred=this.mofForm.value.customerReceiptsIncurred,this.formThreeDetails.formThreeId=this.formThreeId;var r={formThreeId:this.formThreeId,formThreeModelMf:this.formThreeModelMf,projectId:this.formThreeDetails.projectId};this.apiService.saveFormThree(r).subscribe((function(r){e.disableButton=!1,e.loadingSpinner=!1,"200"==r.status&&(e.formThreeDetails.formThreeModelMf=r.data.formThreeModelMf?r.data.formThreeModelMf:e.formThreeModelMf,e.formThreeModelMf=r.data.formThreeModelMf,e.apiService.updateFormThree(e.formThreeDetails),e.router.navigate(["qpr/payment"]))}),(function(r){e.disableButton=!1,e.loadingSpinner=!1,e.inputJson.next({popShow:!0,popMsg:"Failed to Save the data",popClass:"alert alert-danger",popRoute:""})}))}},{key:"formatValue",value:function(e){return e>0?Number(e).toLocaleString("en-IN"):e}},{key:"next",value:function(){var e=this;this.loadingSpinner=!0,this.disableButton=!0,this.formThreeId=sessionStorage.getItem("formThreeId"),this.formThreeId?(this.disableButton=!1,this.loadingSpinner=!1,this.step=2,this.getFormThreeDetails()):this.apiService.insertFormThreeAData(this.formThreeAllData).subscribe((function(r){if("200"==r.code){var t=r.data?r.data:r;if(t.formThreeId){e.formThreeId=t.formThreeId,sessionStorage.setItem("formThreeId",e.formThreeId),e.getFormThreeDetails();var o={formThreeId:t.formThreeId,retId:e.returnId};e.apiService.updateFormThreeIdInQpr(o).subscribe((function(r){e.disableButton=!1,e.loadingSpinner=!1,e.step=2,e.apiService.updateFormThree(e.formThreeDetails)}))}}}),(function(r){e.disableButton=!1,e.loadingSpinner=!1,e.inputJson.next({popShow:!0,popMsg:"Failed to Save the data",popClass:"alert alert-danger",popRoute:""})}))}},{key:"onSelectFile",value:function(e){this.errorMsg=!1,this.successMsg=!1;var r=e.target.files[0];this.userFile=r}},{key:"formThreeAExlUpload",value:function(){var e=this;if(this.uploadFormThreeA.valid){this.loadingSpinner=!0,this.errorMsg=!1;var r=new FormData;r.append("file",this.userFile),r.append("projectId",this.projectId),r.append("processId",this.returnId),r.append("processType","QTR_PROCESS"),this.apiService.postFormThreeAData(r).subscribe((function(r){if(200==r.status){e.fileUploaded=!0;var t=r.data;e.formThreeAllData=t,e.loadingSpinner=!1,e.successMsgTxt="Form 3A submitted successfully for the project.",e.successMsg=!0,e.formThreeADetails=t,e.formThreeAList=t.formThreeAList,e.formThreeASummayList=t.formThreeASummayList,e.loadingSpinner=!1,e.uploadFormThreeA.patchValue({excelfile:""}),sessionStorage.removeItem("formThreeId")}else{e.uploadFormThreeA.patchValue({excelfile:""}),e.loadingSpinner=!1,e.errorMsg=r.masssge;var o=e._reraService.httpStr+e._apiURL.formThreeApi+"public/downloaderrorfile/"+r.errKey;window.open(o,"_blank"),e.inputJson.next({downloadError:r.data,popShow:!0,popMsg:r.masssge,popClass:"alert alert-danger",popRoute:""})}}),(function(r){e.uploadFormThreeA.patchValue({excelfile:""}),null!=r.error.message?(e.loadingSpinner=!1,e.inputJson.next({popShow:!0,popMsg:r.error.message,popClass:"alert alert-danger",popRoute:""})):(e.uploadFormThreeA.patchValue({excelfile:""}),e.loadingSpinner=!1,e.inputJson.next({popShow:!0,popMsg:"Please upload valid Excel data",popClass:"alert alert-danger",popRoute:""})),e.successMsg=!1}))}else this.loadingSpinner=!1,this.excelErrorMsg="Please select a file to upload",this.inputJson.next({popShow:!0,popMsg:"Please select a file to upload",popClass:"alert alert-danger",popRoute:""}),this.successMsg=!1}},{key:"transformAmount",value:function(e){return Number(e).toLocaleString("en-IN")}},{key:"back",value:function(){this.step>1?this.step=this.step-1:this._location.back()}}]),e}();B.ctorParameters=function(){return[{type:d.e},{type:u.a},{type:m.a},{type:O.a},{type:h},{type:a.h},{type:v.a}]},o.b([Object(n.kb)("myDiv",{static:!1})],B.prototype,"myDiv",void 0);var I=[{path:"",component:p,children:[{path:"form1",component:g},{path:"internal-work",component:k},{path:"external-work",component:D},{path:"common-area",component:b},{path:"formonec",component:F},{path:"form3",component:B=o.b([Object(n.n)({selector:"app-form3",template:o.c(t("DPTa")).default,styles:[o.c(t("aWhg")).default]})],B)}]}],S=_createClass((function e(){_classCallCheck(this,e)}));S=o.b([Object(n.J)({imports:[d.f.forChild(I)],exports:[d.f]})],S);var W=t("NSbh"),y=t("6Lj3"),C=t("pLZG"),x=function(){function e(r,t,o){_classCallCheck(this,e),this.apiService=r,this._apiURL=t,this.router=o,this.className="",this.formOneBFilled=!1}return _createClass(e,[{key:"ngOnInit",value:function(){var e=this;this.projectId=sessionStorage.getItem("projectId"),this.qtrId=sessionStorage.getItem("quaterId"),this.apiService.currentData.subscribe((function(r){e.activeBlock=r})),this.apiService.blocks.subscribe((function(r){e.blockDetails=r,e.formoneADetails=e.blockDetails&&e.blockDetails.formOneAList?e.blockDetails.formOneAList:[]})),this.getFormDetails(this.projectId),this.router.events.pipe(Object(C.a)((function(e){return e instanceof d.b}))).subscribe((function(r){e.currentRoute=r.urlAfterRedirects}))}},{key:"getOldFormOneDetailsByQtr",value:function(e){var r=this;this.apiService.getOldFormOneDetailsByQtr(e).subscribe((function(e){if(200==e.status&&(r.oldFormDetails=e.data,r.oldFormDetails&&r.oldFormDetails.returnFileList&&r.oldFormDetails.returnFileList.length)){var t=r.oldFormDetails.returnFileList.length,o=r.oldFormDetails.returnFileList[t-1];if(o&&o.returnId){sessionStorage.setItem("qtrReturnId",o.returnId);var n=o.formOne.formId;r.getFormOneFilledDetails(n)}}}))}},{key:"getFormOneFilledDetails",value:function(e){var r=this;this.apiService.getFormOneDetails(e).subscribe((function(e){if(e.formOneAList){var t=e.formOneAList;t&&t.length&&(t.forEach((function(e){e.formStatus="filled",e.primaryIdGenerated=!0})),r.blockDetails.formOneAList=r.blockDetails.formOneAList.map((function(e){return t.find((function(r){return r.blockName===e.blockName}))||e})),r.blockDetails.formOneId=e.formOneId,r.blockDetails.formOneAList[0].formStatus="active",sessionStorage.setItem("isFormOneGenerated","true"),e.formOneB&&(r.formOneBFilled=!0,r.blockDetails.formStatus="filled",r.blockDetails.formOneB=e.formOneB),r.apiService.updateData(r.blockDetails),r.activeBlock=r.blockDetails.formOneAList[0],r.apiService.changeData(r.activeBlock))}}))}},{key:"getFormDetails",value:function(e){var r=this;this.apiService.getFormDetails(e).subscribe((function(e){200==e.status&&(r.formDetails=e.data,null!=r.formDetails.formOneId&&(r.getFormOneDetails(r.formDetails.formOneId),r.getOldFormOneDetailsByQtr(r.qtrId)),sessionStorage.setItem("projectFormThreeId",r.formDetails.formThreeId))}))}},{key:"getFormOneDetails",value:function(e){var r=this;this.apiService.getFormOneDetails(e).subscribe((function(e){if(r.blockDetails=e,r.blockDetails.formStatus="inActive",e.formOneAList&&e.formOneAList.length){r.blockDetails.formOneAList=e.formOneAList.map((function(e){return Object.assign({},e,_defineProperty(_defineProperty({},"formStatus","inActive"),"primaryIdGenerated",!1))})),r.blockDetails.formOneAList[0].formStatus="active",r.formoneADetails=r.blockDetails.formOneAList,r.activeBlock=r.formoneADetails[0],sessionStorage.setItem("blockIndex","0"),r.apiService.changeData(r.activeBlock),r.apiService.updateData(r.blockDetails),r.router.navigate(["qprDetails/form1"])}}))}},{key:"getDetails",value:function(e,r,t){if(r&&"1"==r){var o=sessionStorage.getItem("blockIndex"),n=o?Number(o):null;sessionStorage.setItem("blockIndex",""),this.activeBlock.formStatus="filled",this.blockDetails.formOneAList[n]=this.activeBlock,this.blockDetails.formStatus="active",this.apiService.updateData(this.blockDetails),this.router.navigate(["qprDetails/common-area"])}else{var a=sessionStorage.getItem("blockIndex"),i=a?Number(a):null;"active"==this.activeBlock.formStatus?this.activeBlock.primaryIdGenerated?this.activeBlock.formStatus="filled":this.activeBlock.formStatus="inActive":"active"==this.activeBlock.formStatus&&(this.activeBlock.formStatus="filled"),this.blockDetails.formOneAList[i]=this.activeBlock,this.apiService.updateData(this.blockDetails),this.activeBlock=e,this.blockDetails.formStatus="inActive",this.activeBlock.formStatus="active",sessionStorage.setItem("isFormOneGenerated","true"),sessionStorage.setItem("blockIndex",t.toString()),console.log(this.activeBlock),this.apiService.changeData(this.activeBlock),this.router.navigate(["qprDetails/form1"])}}},{key:"openForm",value:function(e){this.activeBlock={},this.activeBlock.blockId=e,"form1c"==e?this.router.navigate(["qprDetails/formonec"]):this.router.navigate(["qprDetails/form3"])}}]),e}();x.ctorParameters=function(){return[{type:h},{type:m.a},{type:d.e}]},x=o.b([Object(n.n)({selector:"app-block-details",template:o.c(t("XQIC")).default,styles:[o.c(t("a0H+")).default]})],x);var T=t("kdZ/"),w=t("5c4+"),N=t("ybvR"),A=t("4nBV");t.d(r,"QprSimplificationModule",(function(){return E}));var E=_createClass((function e(){_classCallCheck(this,e)}));E=o.b([Object(n.J)({declarations:[p,x,g,k,D,b,F,B],imports:[a.b,S,i.a,l.a,s.a,W.a,y.a,T.a,w.a,f.g,N.a,A.a]})],E)},XP3S:function(e,r,t){"use strict";t.r(r),r.default='\r\n<div class="row mt-4 mb-4">\r\n    <div class="col-md-12 mt-8" *ngIf="activeBlock">\r\n      <form [formGroup]="externalWorkForm" id="validateForm">\r\n          <div class="card shadow" #myDiv>\r\n            <div class="card-header"><strong>Details of External Work : For Block {{activeBlock?.blockName}}</strong></div>\r\n            <div class="card-body">\r\n              <div class="table-responsive">\r\n                <table class="table table-bordered" > \r\n                  <thead class="bg-light">\r\n                    <tr>\r\n                      <td>Sr.No.</td>\r\n                      <td>Perticular</td>\r\n                      <td>Proposed (Yes / No) <sup>*</sup></td>\r\n                      <td>Work done % <sup>*</sup></td>\r\n                      <td>Remarks</td>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                      <tr>\r\n                        <td>1</td>\r\n                        <td>External Plumbing Work</td>\r\n                        <td>\r\n                            <div class="form-group col-md-12">\r\n                              <label class="radio-lbl">\r\n                                <input type="radio" class="form-control" (change)="onRadioChange($event, 1)" formControlName="plumbingProposedFlag" value="true"> Yes\r\n                              </label>\r\n                              <label class="radio-lbl">\r\n                                <input type="radio" class="form-control" (change)="onRadioChange($event, 1)" formControlName="plumbingProposedFlag" value="false"> No\r\n                              </label>\r\n                            </div>\r\n                        </td>\r\n                        <td>\r\n                          <div class="form-group col-md-12">\r\n                            <input type="number" [readonly]="disableFields?.disablePlumbingWorkdone" class="form-control" formControlName="plumbingWorkDone"  [(ngModel)]="activeBlock.plumbingWorkDone" />\r\n                            <div *ngIf="plumbingWorkDone?.errors && (plumbingWorkDone?.dirty || plumbingWorkDone?.touched || isSubmitted)" class="error">\r\n                              <div *ngIf="plumbingWorkDone?.hasError(\'required\')">\r\n                                Work done % is required\r\n                              </div>\r\n                              <div *ngIf="plumbingWorkDone?.hasError(\'max\')">\r\n                                Should be less than or equal to 100\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </td>\r\n                        <td>\r\n                            <div class="form-group col-md-12">\r\n                                <input type="text" class="form-control" formControlName="plumbingWorkRemarks"  [(ngModel)]="activeBlock.plumbingWorkRemarks" />\r\n                              </div>\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>2</td>\r\n                        <td>External Plaster & Elevation work</td>\r\n                        <td>\r\n                            <div class="form-group col-md-12">\r\n                              <label class="radio-lbl">\r\n                                <input type="radio" class="form-control" (change)="onRadioChange($event, 2)" formControlName="plasterProposedFlag" value="true"> Yes\r\n                              </label>\r\n                              <label class="radio-lbl">\r\n                                <input type="radio" class="form-control" (change)="onRadioChange($event, 2)" formControlName="plasterProposedFlag" value="false"> No\r\n                              </label>\r\n                            </div>\r\n                        </td>\r\n                        <td>\r\n                          <div class="form-group col-md-12">\r\n                            <input type="number" [readonly]="disableFields?.disablePlasterWorkdone" class="form-control" formControlName="plasterWorkDone"  [(ngModel)]="activeBlock.plasterWorkDone" />\r\n                            <div *ngIf="plasterWorkDone?.errors && (plasterWorkDone?.dirty || plasterWorkDone?.touched || isSubmitted)" class="error">\r\n                              <div *ngIf="plasterWorkDone?.hasError(\'required\')">\r\n                                Work done % is required\r\n                              </div>\r\n                              <div *ngIf="plasterWorkDone?.hasError(\'max\')">\r\n                                Should be less than or equal to 100\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </td>\r\n                        <td>\r\n                            <div class="form-group col-md-12">\r\n                                <input type="text" class="form-control" formControlName="plasterWorkRemarks"  [(ngModel)]="activeBlock.plasterWorkRemarks" />\r\n                              </div>\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>3</td>\r\n                        <td>Parapet wall, Flooring & Waterproofing work on Terrace</td>\r\n                        <td>\r\n                          <div class="form-group col-md-12">\r\n                            <label class="radio-lbl">\r\n                              <input type="radio" class="form-control" (change)="onRadioChange($event, 3)" formControlName="terraceProposedFlag" value="true"> Yes\r\n                            </label>\r\n                            <label class="radio-lbl">\r\n                              <input type="radio" class="form-control" (change)="onRadioChange($event, 3)" formControlName="terraceProposedFlag" value="false"> No\r\n                            </label>\r\n                          </div>\r\n                        </td>\r\n                        <td>\r\n                          <div class="form-group col-md-12">\r\n                            <input type="number" class="form-control" [readonly]="disableFields?.disableTerraceWorkdone" formControlName="terraceWorkDone"  [(ngModel)]="activeBlock.terraceWorkDone" />\r\n                            <div *ngIf="terraceWorkDone?.errors && (terraceWorkDone?.dirty || terraceWorkDone?.touched || isSubmitted)" class="error">\r\n                              <div *ngIf="terraceWorkDone?.hasError(\'required\')">\r\n                                Work done % is required\r\n                              </div>\r\n                              <div *ngIf="terraceWorkDone?.hasError(\'max\')">\r\n                                Should be less than or equal to 100\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </td>\r\n                        <td>\r\n                            <div class="form-group col-md-12">\r\n                                <input type="text" class="form-control" formControlName="terraceWorkRemarks"  [(ngModel)]="activeBlock.terraceWorkRemarks" />\r\n                              </div>\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>4</td>\r\n                        <td>Number of Lifts Installed</td>\r\n                        <td>\r\n                          <div class="form-group col-md-12">\r\n                            <label class="radio-lbl">\r\n                              <input type="radio" class="form-control" (change)="onRadioChange($event, 4)" formControlName="liftsProposedFlag" value="true"> Yes\r\n                            </label>\r\n                            <label class="radio-lbl">\r\n                              <input type="radio" class="form-control" (change)="onRadioChange($event, 4)" formControlName="liftsProposedFlag" value="false"> No\r\n                            </label>\r\n                          </div>\r\n                        </td>\r\n                        <td>\r\n                          <div class="form-group col-md-12">\r\n                            <input type="number" class="form-control" [readonly]="disableFields?.disableLiftsWorkdone || externalWorkForm?.controls?.liftsProposedFlag.value == \'false\'" formControlName="liftsWorkDone"  [(ngModel)]="activeBlock.liftsWorkDone" />\r\n                            <div *ngIf="liftsWorkDone?.errors && (liftsWorkDone?.dirty || liftsWorkDone?.touched || isSubmitted)" class="error">\r\n                              <div *ngIf="liftsWorkDone?.hasError(\'required\')">\r\n                                Work done % is required\r\n                              </div>\r\n                              <div *ngIf="liftsWorkDone?.hasError(\'max\')">\r\n                                Should be less than or equal to 100\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </td>\r\n                        <td>\r\n                            <div class="form-group col-md-12">\r\n                                <input type="text" class="form-control" formControlName="liftsWorkRemarks"  [(ngModel)]="activeBlock.liftsWorkRemarks" />\r\n                              </div>\r\n                        </td>\r\n                      </tr>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            <br>\r\n          </div>\r\n        </div>\r\n        </form>\r\n    </div>\r\n    <div class="col-md-12 mt-8">\r\n      <form [formGroup]="photoRemarksForm" id="validateForm">\r\n        <div class="card shadow">\r\n          <div class="card-header"><strong>Block Photo Upload</strong></div>\r\n          <div class="card-body">\r\n            <div class="table-responsive">\r\n              <table class="table table-bordered" > \r\n                <thead class="bg-light">\r\n                  <tr>\r\n                    <td>Sr.No.</td>\r\n                    <td>Perticular</td>\r\n                    <td>Photograph</td>\r\n                    <td>Remarks</td>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                      <td>1</td>\r\n                      <td>Photograph of Block {{activeBlock?.blockName}} showing external development of whole block from outside<sup>*</sup></td>\r\n                      <td>\r\n                        <div>\r\n                          <div *ngIf="formOneDocDetails.photoExternalUId" style="margin-bottom: 5px;">\r\n                            <app-multi-file-view [Uid]="formOneDocDetails.photoExternalUId"></app-multi-file-view>\r\n                          </div>\r\n                          <app-file-upload (myEvent)="setValue($event)"\r\n                          [parm]="{apiType:\'NEW\',fileId:\'photoExternalId\',docId:photoExternalFUId,staticDocId:\'photoExternalFUId\',show:false,close:true,fileType:[\'jpeg\',\'jpg\',\'png\', \'pdf\']}">\r\n                          </app-file-upload>\r\n                        </div>\r\n                      </td>\r\n                      <td>\r\n                        <div class="form-group col-md-12">\r\n                          <input type="text" class="form-control" formControlName="photoExternalRemarks" placeholder="Enter Block/Floor/Unit No" />\r\n                        </div>\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>2</td>\r\n                      <td>Photograph/s of Block {{activeBlock?.blockName}} showing flooring of Rooms and Toilet from inside.<br>\r\n                        (Please mention which floor and Unit at which latest work completed for photograph)<sup>*</sup></td>\r\n                      <td>\r\n                        <div>\r\n                          <div *ngIf="formOneDocDetails.photoFlooringUId" style="margin-bottom: 5px;">\r\n                            <app-multi-file-view [Uid]="formOneDocDetails.photoFlooringUId"></app-multi-file-view>\r\n                          </div>\r\n                          <app-file-upload (myEvent)="setValue($event)"\r\n                          [parm]="{apiType:\'NEW\',fileId:\'photoFlooringId\',docId:photoFlooringFUId,staticDocId:\'photoFlooringFUId\',show:false,close:true,fileType:[\'jpeg\',\'jpg\',\'png\',\'pdf\']}">\r\n                          </app-file-upload>\r\n                        </div>\r\n                      </td>\r\n                      <td>\r\n                        <div class="form-group col-md-12">\r\n                          <input type="text" class="form-control" formControlName="photoFlooringRemarks" placeholder="Enter Block/Floor/Unit No"/>\r\n                        </div>\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>3</td>\r\n                      <td>Photograph/s of Block {{activeBlock?.blockName}} showing Walls of Rooms, Doors and windows from inside.<br>\r\n                        (Please mention which floor and Unit at which latest work completed for photograph)<sup>*</sup></td>\r\n                      <td>\r\n                        <div>\r\n                          <div *ngIf="formOneDocDetails.photoWallsUId" style="margin-bottom: 5px;">\r\n                            <app-multi-file-view [Uid]="formOneDocDetails.photoWallsUId"></app-multi-file-view>\r\n                          </div>\r\n                          <app-file-upload (myEvent)="setValue($event)"\r\n                          [parm]="{apiType:\'NEW\',fileId:\'photoWallsId\',docId:photoWallsFUId,staticDocId:\'photoWallsFUId\',show:false,close:true,fileType:[\'jpeg\',\'jpg\',\'png\',\'pdf\']}">\r\n                          </app-file-upload>\r\n                        </div>\r\n                      </td>\r\n                      <td>\r\n                        <div class="form-group col-md-12">\r\n                          <input type="text" class="form-control" formControlName="photoWallsRemarks" placeholder="Enter Block/Floor/Unit No" />\r\n                        </div>\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>4</td>\r\n                      <td>Photograph of Block {{activeBlock?.blockName}} showing Terrace flooring, Overhead water tank, etc<sup>*</sup></td>\r\n                      <td>\r\n                        <div>\r\n                          <div *ngIf="formOneDocDetails.photoTerraceUId" style="margin-bottom: 5px;">\r\n                            <app-multi-file-view [Uid]="formOneDocDetails.photoTerraceUId"></app-multi-file-view>\r\n                          </div>\r\n                          <app-file-upload (myEvent)="setValue($event)"\r\n                          [parm]="{apiType:\'NEW\',fileId:\'photoTerraceId\',docId:photoTerraceFUId,staticDocId:\'photoTerraceFUId\',show:false,close:true,fileType:[\'jpeg\',\'jpg\',\'png\',\'pdf\']}">\r\n                          </app-file-upload>\r\n                        </div>\r\n                      </td>\r\n                      <td>\r\n                        <div class="form-group col-md-12">\r\n                          <input type="text" class="form-control" formControlName="photoTerraceRemarks" placeholder="Enter Block/Floor/Unit No"/>\r\n                        </div>\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>5</td>\r\n                      <td>Photograph/s of Common Areas showing parking Flooring and surrounding Developments<sup>*</sup></td>\r\n                      <td>\r\n                        <div>\r\n                          <div *ngIf="formOneDocDetails.photoCommonUId" style="margin-bottom: 5px;">\r\n                            <app-multi-file-view [Uid]="formOneDocDetails.photoCommonUId"></app-multi-file-view>\r\n                          </div>\r\n                          <app-file-upload (myEvent)="setValue($event)"\r\n                          [parm]="{apiType:\'NEW\',fileId:\'photoCommonId\',docId:photoCommonFUId,staticDocId:\'photoCommonFUId\',show:false,close:true,fileType:[\'jpeg\',\'jpg\',\'png\',\'pdf\']}">\r\n                          </app-file-upload>\r\n                        </div>\r\n                      </td>\r\n                      <td>\r\n                        \x3c!-- <div class="form-group col-md-12">\r\n                          <input type="text" class="form-control" formControlName="photoCommonRemarks"/>\r\n                        </div> --\x3e\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>6</td>\r\n                      <td>Copies of Approvals taken during current quarter.<sup>*</sup></td>\r\n                      <td>\r\n                        <div>\r\n                          <div *ngIf="formOneDocDetails.photoApprovalsUId" style="margin-bottom: 5px;">\r\n                            <app-multi-file-view [Uid]="formOneDocDetails.photoApprovalsUId"></app-multi-file-view>\r\n                          </div>\r\n                          <app-file-upload (myEvent)="setValue($event)"\r\n                          [parm]="{apiType:\'NEW\',fileId:\'photoApprovalsId\',docId:photoApprovalsFUId,staticDocId:\'photoApprovalsFUId\',show:false,close:true,fileType:[\'jpeg\',\'jpg\',\'png\',\'pdf\']}">\r\n                          </app-file-upload>\r\n                        </div>\r\n                      </td>\r\n                      <td>\r\n                        \x3c!-- <div class="form-group col-md-12">\r\n                          <input type="text" class="form-control" formControlName="photoApprovalsRemarks" />\r\n                        </div> --\x3e\r\n                      </td>\r\n                    </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n\r\n          <div class="row" style="width:100%">\r\n            <div class="col-md-12 text-center">\r\n              <br>\r\n              <a href="javascript:void(0);" title="Back">\r\n                <button class="btn btn-primary" (click)="back()">Previous</button>&nbsp; \r\n                <button class="btn btn-primary" (click)="nextBlock()" [disabled]="disableButton || !allPhotosUploaded">{{buttonText}}</button>&nbsp; \r\n              </a>\r\n            </div>\r\n            <br>\r\n          </div>          \r\n          <br>\r\n        </div>\r\n      </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n  <app-validation-message [message]="inputJson"></app-validation-message>\r\n  <app-loader *ngIf="loadingSpinner"></app-loader>\r\n'},XQIC:function(e,r,t){"use strict";t.r(r),r.default='<div *ngIf="formoneADetails">\r\n    <div class="row mt-4 mb-4">\r\n      <div class="col-md-12 mt-8">\r\n        <div class="card shadow">\r\n          <div class="card-header"><strong>Blocks</strong></div>\r\n          <div class="card-body">\r\n            <div class="qprRow">\r\n              <div class="qprText">\r\n                <button class="qprCol" *ngFor="let block of formoneADetails; let i = index" title="{{block.blockName}}" [disabled]="block.formStatus !== \'filled\'"\r\n                  [ngClass]="{\'active\': block.formStatus == \'active\' || block.formStatus == \'saved\', \'inactive\' : block.formStatus == \'inActive\', \'submitted\' : block.formStatus == \'filled\'}"\r\n                  (click)="getDetails(block, \'\', i)">\r\n        \r\n                  <div class="left"> {{block.blockName}}</div>\r\n                  <div class="right">\r\n                    <div class="qprDate">\r\n                      <div class="qprDateBox">\r\n                        {{block.devStartDate | date : \'dd-MM-yyyy\'}}<br><span>to</span><br>{{block.devEndDate | date : \'dd-MM-yyyy\'}}</div>\r\n                    </div>\r\n                  </div>\r\n                </button>\r\n                <button class="qprCol" title="Common Area" [disabled]="!blockDetails?.allBlocksFilled && !formOneBFilled"\r\n                  (click)="getDetails(\'\', \'1\', i)">\r\n                  <div class="center-align" [ngClass]="{\'active\': blockDetails?.formStatus == \'active\', \'submitted\' : blockDetails?.formStatus == \'filled\', \'inactive\' : blockDetails?.formStatus == \'inActive\'}">\r\n                    <div> Common <br>Area</div>\r\n                  </div>\r\n                </button>\r\n                \x3c!-- <button class="qprCol" title="Form 1 C"\r\n                  (click)="openForm(\'form1c\')">\r\n                  <div class="center-align" [ngClass]="{\'active\': activeBlock.blockId == \'form1c\'}">\r\n                    <div> Form One <br>C</div>\r\n                  </div>\r\n                </button>\r\n                <button class="qprCol" title="Common Area"\r\n                  (click)="openForm(\'form3\')">\r\n                  <div class="center-align" [ngClass]="{\'active\': activeBlock.blockId == \'form3\'}">\r\n                    <div> Form 3 <br>Details</div>\r\n                  </div>\r\n                </button> --\x3e\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        </div>\r\n      </div>\r\n   </div>'},"Yr+n":function(e,r,t){"use strict";t.r(r),r.default='\r\n<div class="row mt-4 mb-4">\r\n    <div class="col-md-12 mt-8" *ngIf="formOneCDetails">\r\n      <form [formGroup]="formOneCForm" id="validateForm">\r\n          <div class="card shadow" #myDiv>\r\n            <div class="card-header"><strong>Details Regarding Garage & Parking in respect of the entire registered phase.</strong></div>\r\n            <div class="card-body">\r\n              <div class="table-responsive">\r\n                <table class="table table-bordered" > \r\n                  <thead class="bg-light">\r\n                    <tr>\r\n                      <td>Sr.No.</td>\r\n                      <td>Details</td>\r\n                      <td>Proposed Total Number<sup>*</sup></td>\r\n                      <td>Total Area (Sq Mtrs)<sup>*</sup></td>\r\n                      <td>Percentage of Work done (%)<sup>*</sup></td>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                      <tr>\r\n                        <td>1</td>\r\n                        <td>Garage</td>\r\n                        <td>\r\n                            <div class="form-group col-md-12">\r\n                              <input type="number" class="form-control" formControlName="garageNo" [(ngModel)]="formOneCDetails.garageNo" (ngModelChange)="changeData(formOneCDetails.garageNo, \'totalAreaGarage\', \'garageProgressPer\')"/>\r\n                              <div class="error-box" readonly *ngIf="isFieldInvalid(\'garageNo\')"><small class="error"> This field is required </small>\r\n                              </div>\r\n                            </div>\r\n                        </td>\r\n                        <td>\r\n                            <div class="form-group col-md-12">\r\n                              <input type="number" class="form-control" formControlName="totalAreaGarage" [readonly]="formOneCForm?.controls?.garageNo?.value == \'0\'"  [(ngModel)]="formOneCDetails.totalAreaGarage" />\r\n                              <div class="error-box" *ngIf="isFieldInvalid(\'totalAreaGarage\')"><small class="error"> This field is required </small>\r\n                              </div>\r\n                            </div>\r\n                        </td>\r\n                        <td>\r\n                          <div class="form-group col-md-12">\r\n                            <input type="number" class="form-control" [readonly]="formOneCForm?.controls?.garageNo?.value == \'0\'" formControlName="garageProgressPer"  [(ngModel)]="formOneCDetails.garageProgressPer" />\r\n                            <div *ngIf="garageProgressPer?.errors && (garageProgressPer?.dirty || garageProgressPer?.touched || isSubmitted)" class="error">\r\n                              <div *ngIf="garageProgressPer?.hasError(\'required\')">\r\n                                Work done % is required\r\n                              </div>\r\n                              <div *ngIf="garageProgressPer?.hasError(\'max\')">\r\n                                Should be less than or equal to 100\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>2</td>\r\n                        <td>Covered Parking</td>\r\n                        <td>\r\n                            <div class="form-group col-md-12">\r\n                              <input type="number" class="form-control" formControlName="coveredParkingNo"  [(ngModel)]="formOneCDetails.coveredParkingNo" (ngModelChange)="changeData(formOneCDetails.garageNo, \'totalAreaCoveredParking\', \'coveredProgressPer\')"/>\r\n                              <div class="error-box" *ngIf="isFieldInvalid(\'coveredParkingNo\')"><small class="error"> This field is required </small>\r\n                              </div>\r\n                            </div>\r\n                        </td>\r\n                        <td>\r\n                            <div class="form-group col-md-12">\r\n                              <input type="number" class="form-control" formControlName="totalAreaCoveredParking" [readonly]="formOneCForm?.controls?.coveredParkingNo?.value == \'0\'" [(ngModel)]="formOneCDetails.totalAreaCoveredParking" />\r\n                              <div class="error-box" *ngIf="isFieldInvalid(\'totalAreaCoveredParking\')"><small class="error"> This field is required </small>\r\n                              </div>\r\n                            </div>\r\n                        </td>\r\n                        <td>\r\n                          <div class="form-group col-md-12">\r\n                            <input type="number" class="form-control" [readonly]="formOneCForm?.controls?.coveredParkingNo?.value == \'0\'" formControlName="coveredProgressPer"  [(ngModel)]="formOneCDetails.coveredProgressPer" />\r\n                            <div *ngIf="coveredProgressPer?.errors && (coveredProgressPer?.dirty || coveredProgressPer?.touched || isSubmitted)" class="error">\r\n                              <div *ngIf="coveredProgressPer?.hasError(\'required\')">\r\n                                Work done % is required\r\n                              </div>\r\n                              <div *ngIf="coveredProgressPer?.hasError(\'max\')">\r\n                                Should be less than or equal to 100\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>3</td>\r\n                        <td>Open Parking</td>\r\n                        <td>\r\n                            <div class="form-group col-md-12">\r\n                              <input type="number" class="form-control" formControlName="openParkingNo"  [(ngModel)]="formOneCDetails.openParkingNo" (ngModelChange)="changeData(formOneCDetails.openParkingNo, \'totalAreaOpenParking\', \'openProgressPer\')"/>\r\n                              <div class="error-box" *ngIf="isFieldInvalid(\'openParkingNo\')"><small class="error"> This field is required </small>\r\n                              </div>\r\n                            </div>\r\n                        </td>\r\n                        <td>\r\n                            <div class="form-group col-md-12">\r\n                              <input type="number" class="form-control" formControlName="totalAreaOpenParking" [readonly]="formOneCForm?.controls?.openParkingNo?.value == \'0\'" [(ngModel)]="formOneCDetails.totalAreaOpenParking" />\r\n                              <div class="error-box" *ngIf="isFieldInvalid(\'totalAreaOpenParking\')"><small class="error"> This field is required </small>\r\n                              </div>\r\n                            </div>\r\n                        </td>\r\n                        <td>\r\n                          <div class="form-group col-md-12">\r\n                            <input type="number" class="form-control" [readonly]="formOneCForm?.controls?.openParkingNo?.value == \'0\'" formControlName="openProgressPer"  [(ngModel)]="formOneCDetails.openProgressPer" />\r\n                            <div *ngIf="openProgressPer?.errors && (openProgressPer?.dirty || openProgressPer?.touched || isSubmitted)" class="error">\r\n                              <div *ngIf="openProgressPer?.hasError(\'required\')">\r\n                                Work done % is required\r\n                              </div>\r\n                              <div *ngIf="openProgressPer?.hasError(\'max\')">\r\n                                Should be less than or equal to 100\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </td>\r\n                      </tr>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n  \r\n            <div class="row" style="width:100%">\r\n              <div class="col-md-12 text-center">\r\n                <br>\r\n                <a href="javascript:void(0);" title="Back">\r\n                  <button class="btn btn-primary" (click)="back()" [disabled]="disableButton">Previous</button>&nbsp; \r\n                  <button class="btn btn-primary" (click)="next()" [disabled]="disableButton">Save & Next</button>&nbsp; \r\n                </a>\r\n              </div>\r\n              <br>\r\n            </div>          \r\n            <br>\r\n          </div>\r\n        </div>\r\n        </form>\r\n    </div>\r\n  </div>\r\n  <app-validation-message [message]="inputJson"></app-validation-message>\r\n  <app-loader *ngIf="loadingSpinner"></app-loader>'},"a0H+":function(e,r,t){"use strict";t.r(r),r.default=".qprRow .qprText .qprCol .right .qprDate {\n  padding: 40px 12px;\n}\n\n.qprRow .qprText .qprCol.active .left, .qprRow .qprText .qprCol.submitted .left, .qprRow .qprText .qprCol.inactive .left {\n  width: 140px;\n  height: 100%;\n  font-size: 1.8rem;\n}\n\n.qprRow .qprText .qprCol {\n  min-width: 200px;\n}\n\n.qprText {\n  overflow-x: scroll;\n}\n\n.qprRow .qprText .qprCol .right {\n  background: #fff;\n  height: 100%;\n}\n\n.qprRow .qprText .qprCol .center-align {\n  background: #7d7d7d;\n  width: 200px;\n  vertical-align: middle;\n  height: 100%;\n  color: #fff;\n  padding: 40px 16px;\n  font-size: 2rem;\n  font-weight: 600;\n}\n\n.qprRow .qprText .qprCol.active .left {\n  background: #32a761;\n  font-size: 1.8rem;\n}\n\n.active {\n  background: #32a761 !important;\n}\n\n.submitted {\n  background: #404dad !important;\n}\n\n.qprRow .qprText .qprCol.submitted .left {\n  background: #404dad;\n  font-size: 1.8rem;\n}\n\n.inactive {\n  background: #7d7d7d !important;\n}\n\n.card.shadow .card-header {\n  font-size: 1.8rem;\n  text-transform: capitalize;\n}"},aWhg:function(e,r,t){"use strict";t.r(r),r.default=".border-bottom {\n  border-bottom: 1px solid #dee2e6 !important;\n}\n\ntd {\n  vertical-align: middle;\n}\n\n.form-group {\n  margin-bottom: 0;\n  padding-left: 8px;\n}\n\ntable thead tr:first-child th {\n  text-align: center;\n}\n\n.card.shadow .card-header {\n  font-size: 1.8rem;\n  text-transform: capitalize;\n}"},e1wW:function(e,r,t){"use strict";t.r(r),r.default='\r\n<div class="row mt-4 mb-4">\r\n  <div class="col-md-12 mt-8" *ngIf="activeBlock">\r\n    <form [formGroup]="internalWorkForm" id="validateForm">\r\n        <div class="card shadow" #myDiv>\r\n          <div class="card-header"><strong>Details of Internal Work : For Block {{activeBlock?.blockName}}</strong></div>\r\n          <div class="card-body">\r\n            <div class="table-responsive">\r\n              <table class="table table-bordered" > \r\n                <thead class="bg-light">\r\n                  <tr>\r\n                    <td>Sr.No.</td>\r\n                    <td style="width: 50%">Particulars</td>\r\n                    <td>Number of Completed work<sup>*</sup></td>\r\n                    <td>Work done %<sup>*</sup></td>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                      <td>1</td>\r\n                      <td>Excavation</td>\r\n                      <td></td>\r\n                      <td>\r\n                        <div class="form-group col-md-12">\r\n                          <input type="number" class="form-control" formControlName="excavationWrokDone"  [(ngModel)]="activeBlock.excavationWrokDone" />\r\n                          <div *ngIf="excavationWrokDone?.errors && (excavationWrokDone?.dirty || excavationWrokDone?.touched || isSubmitted)" class="error">\r\n                            <div *ngIf="excavationWrokDone?.hasError(\'required\')">\r\n                              Work done % required\r\n                            </div>\r\n                            <div *ngIf="excavationWrokDone?.hasError(\'max\')">\r\n                              Should be less than or equal to 100\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>2</td>\r\n                      <td>Work up-to Plinth Level (Including basement if so)</td>\r\n                      <td></td>\r\n                      <td>\r\n                        <div class="form-group col-md-12">\r\n                          <input type="number" class="form-control" formControlName="plinthWorkDone"  [(ngModel)]="activeBlock.plinthWorkDone" />\r\n                          <div *ngIf="plinthWorkDone?.errors && (plinthWorkDone?.dirty || plinthWorkDone?.touched || isSubmitted)" class="error">\r\n                            <div *ngIf="plinthWorkDone?.hasError(\'required\')">\r\n                              Work done % is required\r\n                            </div>\r\n                            <div *ngIf="plinthWorkDone?.hasError(\'max\')">\r\n                              Should be less than or equal to 100\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>3</td>\r\n                      <td>Number of RCC slabs casted (Above Plinth Level)</td>\r\n                      <td>\r\n                        <div class="form-group col-md-12">\r\n                          <input type="number" class="form-control" formControlName="noOfCmpltdWorkRccSlabs"  [(ngModel)]="activeBlock.noOfCmpltdWorkRccSlabs" (ngModelChange)="changeData(activeBlock.noOfCmpltdWorkRccSlabs, \'slabsWorkDone\')" />\r\n                          <div *ngIf="noOfCmpltdWorkRccSlabs?.errors && (noOfCmpltdWorkRccSlabs?.dirty || noOfCmpltdWorkRccSlabs?.touched || isSubmitted)" class="error">\r\n                            <div *ngIf="noOfCmpltdWorkRccSlabs?.hasError(\'required\')">\r\n                              Number of completed work is required\r\n                            </div>\r\n                            <div *ngIf="noOfCmpltdWorkRccSlabs?.hasError(\'max\')">\r\n                              Should be less than or equal to Number of RCC slabs ({{activeBlock?.totalNoOfSlabs}})\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </td>\r\n                      <td>\r\n                        <div class="form-group col-md-12">\r\n                          <input type="number" class="form-control" [readonly]="internalWorkForm?.controls?.noOfCmpltdWorkRccSlabs?.value == \'0\' || disableField" formControlName="slabsWorkDone"  [(ngModel)]="activeBlock.slabsWorkDone" />\r\n                          <div *ngIf="slabsWorkDone?.errors && (slabsWorkDone?.dirty || slabsWorkDone?.touched || isSubmitted)" class="error">\r\n                            <div *ngIf="slabsWorkDone?.hasError(\'required\')">\r\n                              Work done % is required\r\n                            </div>\r\n                            \x3c!-- <div *ngIf="slabsWorkDone?.hasError(\'max\')">\r\n                              Should be less than or equal to 100\r\n                            </div> --\x3e\r\n                          </div>\r\n                        </div>\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>4</td>\r\n                      <td>Number of Floors completed, Brick masonry work & Internal plaster</td>\r\n                      <td>\r\n                        <div class="form-group col-md-12">\r\n                          <input type="number" class="form-control" formControlName="noOfCmpltdWorkInternal"  [(ngModel)]="activeBlock.noOfCmpltdWorkInternal" (ngModelChange)="changeData(activeBlock.noOfCmpltdWorkInternal, \'internalDetailsWrkDone\')"/>\r\n                          <div *ngIf="noOfCmpltdWorkInternal?.errors && (noOfCmpltdWorkInternal?.dirty || noOfCmpltdWorkInternal?.touched || isSubmitted)" class="error">\r\n                            <div *ngIf="noOfCmpltdWorkInternal?.hasError(\'required\')">\r\n                              Number of Completed work is required\r\n                            </div>\r\n                            <div *ngIf="noOfCmpltdWorkInternal?.hasError(\'max\')">\r\n                              Should be less than or equal to Total number of floors ({{activeBlock?.noOfFloors}})\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </td>\r\n                      <td>\r\n                        <div class="form-group col-md-12">\r\n                          <input type="number" class="form-control" [readonly]="internalWorkForm?.controls?.noOfCmpltdWorkInternal?.value == \'0\' || disableField" formControlName="internalDetailsWrkDone"  [(ngModel)]="activeBlock.internalDetailsWrkDone" />\r\n                          <div *ngIf="internalDetailsWrkDone?.errors && (internalDetailsWrkDone?.dirty || internalDetailsWrkDone?.touched || isSubmitted)" class="error">\r\n                            <div *ngIf="internalDetailsWrkDone?.hasError(\'required\')">\r\n                              Work done % is required\r\n                            </div>\r\n                            \x3c!-- <div *ngIf="internalDetailsWrkDone?.hasError(\'max\')">\r\n                              Should be less than or equal to 100\r\n                            </div> --\x3e\r\n                          </div>\r\n                        </div>\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>5</td>\r\n                      <td>Number of Floors to which completed Number of Staircases, and entrance lobby/s at each floor level connecting Staircase with Lifts</td>\r\n                      <td>\r\n                        <div class="form-group col-md-12">\r\n                          <input type="number" class="form-control" formControlName="noOfCmpltdWorkStairCases"  [(ngModel)]="activeBlock.noOfCmpltdWorkStairCases" (ngModelChange)="changeData(activeBlock.noOfCmpltdWorkStairCases, \'staircases\')"/>\r\n                          <div *ngIf="noOfCmpltdWorkStairCases?.errors && (noOfCmpltdWorkStairCases?.dirty || noOfCmpltdWorkStairCases?.touched || isSubmitted)" class="error">\r\n                            <div *ngIf="noOfCmpltdWorkStairCases?.hasError(\'required\')">\r\n                              Number of Completed work is required\r\n                            </div>\r\n                            <div *ngIf="noOfCmpltdWorkStairCases?.hasError(\'max\')">\r\n                              Should be less than or equal to 1000\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </td>\r\n                      <td>\r\n                        <div class="form-group col-md-12">\r\n                          <input type="number" class="form-control" [readonly]="internalWorkForm?.controls?.noOfCmpltdWorkStairCases?.value == \'0\'" formControlName="staircases"  [(ngModel)]="activeBlock.staircases" />\r\n                          <div *ngIf="staircases?.errors && (staircases?.dirty || staircases?.touched || isSubmitted)" class="error">\r\n                            <div *ngIf="staircases?.hasError(\'required\')">\r\n                              Work done % is required\r\n                            </div>\r\n                            <div *ngIf="staircases?.hasError(\'max\')">\r\n                              Should be less than or equal to 100\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>6</td>\r\n                      <td>Number of Units within which flooring work of rooms completed</td>\r\n                      <td>\r\n                        <div class="form-group col-md-12">\r\n                          <input type="number" class="form-control" formControlName="noOfCmpltdWorkStiltFlooring"  [(ngModel)]="activeBlock.noOfCmpltdWorkStiltFlooring" (ngModelChange)="changeData(activeBlock.noOfCmpltdWorkStiltFlooring, \'stiltFloorWorkDone\')"/>\r\n                          <div *ngIf="noOfCmpltdWorkStiltFlooring?.errors && (noOfCmpltdWorkStiltFlooring?.dirty || noOfCmpltdWorkStiltFlooring?.touched || isSubmitted)" class="error">\r\n                            <div *ngIf="noOfCmpltdWorkStiltFlooring?.hasError(\'required\')">\r\n                              Number of Completed work is required\r\n                            </div>\r\n                            <div *ngIf="noOfCmpltdWorkStiltFlooring?.hasError(\'max\')">\r\n                              Should be less than or equal to 1000\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </td>\r\n                      <td>\r\n                        <div class="form-group col-md-12">\r\n                          <input type="number" class="form-control" [readonly]="internalWorkForm?.controls?.noOfCmpltdWorkStiltFlooring?.value == \'0\'" formControlName="stiltFloorWorkDone"  [(ngModel)]="activeBlock.stiltFloorWorkDone" />\r\n                          <div *ngIf="stiltFloorWorkDone?.errors && (stiltFloorWorkDone?.dirty || stiltFloorWorkDone?.touched || isSubmitted)" class="error">\r\n                            <div *ngIf="stiltFloorWorkDone?.hasError(\'required\')">\r\n                              Work done % is required\r\n                            </div>\r\n                            <div *ngIf="stiltFloorWorkDone?.hasError(\'max\')">\r\n                              Should be less than or equal to 100\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>7</td>\r\n                      <td>Number of Units within which, all Toilets & Kitchen flooring & Sanitory fittings work completed</td>\r\n                      <td>\r\n                        <div class="form-group col-md-12">\r\n                          <input type="number" class="form-control" formControlName="noOfCmpltdWorkSanitaryFittings"  [(ngModel)]="activeBlock.noOfCmpltdWorkSanitaryFittings" (ngModelChange)="changeData(activeBlock.noOfCmpltdWorkSanitaryFittings, \'sanitaryFittings\')"/>\r\n                          <div *ngIf="noOfCmpltdWorkSanitaryFittings?.errors && (noOfCmpltdWorkSanitaryFittings?.dirty || noOfCmpltdWorkSanitaryFittings?.touched || isSubmitted)" class="error">\r\n                            <div *ngIf="noOfCmpltdWorkSanitaryFittings?.hasError(\'required\')">\r\n                              Number of Completed work is required\r\n                            </div>\r\n                            <div *ngIf="noOfCmpltdWorkSanitaryFittings?.hasError(\'max\')">\r\n                              Should be less than or equal to 1000\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </td>\r\n                      <td>\r\n                        <div class="form-group col-md-12">\r\n                          <input type="number" class="form-control" [readonly]="internalWorkForm?.controls?.noOfCmpltdWorkSanitaryFittings?.value == \'0\'" formControlName="sanitaryFittings"  [(ngModel)]="activeBlock.sanitaryFittings" />\r\n                          <div *ngIf="sanitaryFittings?.errors && (sanitaryFittings?.dirty || sanitaryFittings?.touched || isSubmitted)" class="error">\r\n                            <div *ngIf="sanitaryFittings?.hasError(\'required\')">\r\n                              Work done % is required\r\n                            </div>\r\n                            <div *ngIf="sanitaryFittings?.hasError(\'max\')">\r\n                              Should be less than or equal to 100\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>8</td>\r\n                      <td>Number of Units within Doors, Windows, Electric work, Plumbing work & other finishing work completed</td>\r\n                      <td>\r\n                        <div class="form-group col-md-12">\r\n                          <input type="number" class="form-control" formControlName="noOfCmpltdWorkInstallation"  [(ngModel)]="activeBlock.noOfCmpltdWorkInstallation" (ngModelChange)="changeData(activeBlock.noOfCmpltdWorkInstallation, \'installationOfAll\')"/>\r\n                          <div *ngIf="noOfCmpltdWorkInstallation?.errors && (noOfCmpltdWorkInstallation?.dirty || noOfCmpltdWorkInstallation?.touched || isSubmitted)" class="error">\r\n                            <div *ngIf="noOfCmpltdWorkInstallation?.hasError(\'required\')">\r\n                              Number of Completed work is required\r\n                            </div>\r\n                            <div *ngIf="noOfCmpltdWorkInstallation?.hasError(\'max\')">\r\n                              Should be less than or equal to 1000\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </td>\r\n                      <td>\r\n                        <div class="form-group col-md-12">\r\n                          <input type="number" class="form-control" [readonly]="internalWorkForm?.controls?.noOfCmpltdWorkInstallation?.value == \'0\'" formControlName="installationOfAll"  [(ngModel)]="activeBlock.installationOfAll" />\r\n                          <div *ngIf="installationOfAll?.errors && (installationOfAll?.dirty || installationOfAll?.touched || isSubmitted)" class="error">\r\n                            <div *ngIf="installationOfAll?.hasError(\'required\')">\r\n                              Work done % is required\r\n                            </div>\r\n                            <div *ngIf="installationOfAll?.hasError(\'max\')">\r\n                              Should be less than or equal to 100\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </td>\r\n                    </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n\r\n          <div class="row" style="width:100%">\r\n            <div class="col-md-12 text-center">\r\n              <br>\r\n              <a href="javascript:void(0);" title="Back">\r\n                <button class="btn btn-primary" (click)="back()" [disabled]="disableButton">Previous</button>&nbsp; \r\n                <button class="btn btn-primary" (click)="next()" [disabled]="disableButton">Save & Next</button>&nbsp; \r\n              </a>\r\n            </div>\r\n            <br>\r\n          </div>          \r\n          <br>\r\n        </div>\r\n      </div>\r\n      </form>\r\n  </div>\r\n</div>\r\n<app-validation-message [message]="inputJson"></app-validation-message>\r\n<app-loader *ngIf="loadingSpinner"></app-loader>\r\n'},h5AC:function(e,r,t){"use strict";t.r(r),r.default=".card.shadow .control-label {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.card-body .form-group .control-label {\n  min-height: 24px !important;\n}\n\n.table-bordered {\n  margin: 0;\n}\n\n.card-body .form-group {\n  margin-bottom: 16px;\n}\n\n.table-bordered .form-group {\n  margin-bottom: 0px;\n}\n\n.center-align {\n  text-align: left;\n  border: 1px solid #ccc;\n  height: 36px;\n  vertical-align: middle;\n  padding-top: 6px;\n  background: #eee;\n  margin: 0 16px;\n  width: calc(100% - 32px);\n}\n\n.error {\n  font-size: 12px;\n  color: red;\n  margin: 2px 0;\n}\n\n.card.shadow .card-header {\n  font-size: 1.8rem;\n  text-transform: capitalize;\n}"},rgta:function(e,r,t){"use strict";t.r(r),r.default=".table-bordered {\n  margin: 0;\n  width: 100%;\n}\n\n.table-bordered td {\n  vertical-align: middle;\n}\n\n.card-body .form-group {\n  margin-bottom: 0px;\n}\n\ninput[type=checkbox], input[type=radio] {\n  width: 12%;\n  display: inline-block;\n  margin-left: 12px;\n}\n\n.radio-lbl {\n  display: inline;\n}\n\n.card.shadow .card-header {\n  font-size: 1.8rem;\n  text-transform: capitalize;\n}"}}]);